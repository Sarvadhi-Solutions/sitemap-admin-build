{"version":3,"sources":["pages/dashboard/UpdateCouponForm.js"],"names":["UpdateCouponForm","_brandList$find","_useState","useState","width","height","_useState2","_slicedToArray","_useState3","_useState4","src","setSrc","_useState5","_useState6","image","setImage","_useState7","_useState8","processing","setProcessing","_useState9","_useState10","_useState11","_useState12","selectedCities","setSelectedCities","_useState13","_useState14","_useState15","value","label","_useState16","selectedBrand","setSelectedBrand","_useState17","_useState18","selectedState","setSelectedState","_useState19","_useState20","stateOptions","setStateOptions","_useState21","_useState22","crop","setCrop","_useState23","_useState24","croppedImageUrls","setCroppedImageUrls","_useState25","_useState26","prevCrop","setPrevCrop","_useState27","_useState28","prevCrops","setPrevCrops","_useState29","_useState30","cityOptions","setCityOptions","_useState31","_useState32","fromDate","setFromDate","_useState33","_useState34","toDate","setToDate","_useState35","_useState36","cropNames","setCropNames","imgRef","useRef","_useState37","_useState38","nameId","setNameId","dispatch","useDispatch","enqueueSnackbar","useSnackbar","couponId","useParams","today","Date","useEffect","OneCoupon","coupon","useSelector","state","_state$coupon","_coupon$brand","_coupon$brand2","_coupon$state","_coupon$state2","_coupon$cities","_coupon$crop_images","brand","brand_name","id","name","cities","map","item","dayjs","start_date","expiry_date","coordinate","cropImages","crop_images","index","push","crop_coordinate","url","handleCropComplete","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","pixelCrop","canvas","ctx","_image","scaleX","scaleY","pixelRatio","cropX","cropY","wrap","_context","prev","next","current","document","createElement","console","log","getContext","sent","naturalWidth","naturalHeight","window","devicePixelRatio","Math","floor","scale","imageSmoothingQuality","x","y","save","drawImage","v4","_objectSpread","concat","_toConsumableArray","toDataURL","stop","_x","_x2","apply","arguments","ListCities","ListBrands","ListStates","selectedBrandId","brandList","_state$brand","cityList","_state$brand2","selectedStateId","states","find","filter","city","state_id","error","_state$brand3","message","variant","newCityOptions","newStateOptions","dataURLtoBlob","dataURL","_arr$","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","Blob","type","onSubmitHandle","_ref3","_callee4","currentDate","citiesId","formdata","data","_context4","now","abrupt","startOf","valueOf","JSON","stringify","FormData","append","forEach","_ref4","_callee3","blob","_context3","startsWith","_x4","_x5","updateCoupon","status","navigate","PATH_DASHBOARD","general","useNavigate","handleBack","addEventListener","removeEventListener","_jsxs","_Fragment","children","_jsx","Backdrop","open","sx","color","zIndex","theme","drawer","CircularProgress","AnimatePresence","Card","HeaderBreadcrumbs","heading","Stack","direction","alignItems","IconButton","onClick","ArrowBackIcon","style","marginLeft","links","m","action","Button","startIcon","Iconify","icon","Scrollbar","spacing","p","minHeight","Grid","container","mb","xs","md","mt","InputLabel","display","fontWeight","TextField","disabled","defaultValue","InputProps","readOnly","Select","placeholder","options","onChange","marginRight","isMulti","optionsWithoutAllCities","option","some","handleChangeCitiesData","overflow","LocalizationProvider","dateAdapter","AdapterDayjs","DemoContainer","components","DatePicker","minDate","date","justifyContent","position","flexDirection","flexWrap","ReactCrop","c","onComplete","crossOrigin","ref","alt","image_dimension","main_image_width","main_image_height","minWidth","maxWidth","maxHeight","top","left","backgroundColor","ml","_cropNames$index","right","padding","cursor","borderRadius","RemoveCircleIcon","event","newCropNames","handleNameChange","target","border","transition","Divider"],"mappings":"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","file":"static/js/13.ade1c577.chunk.js","sourcesContent":["import {\n  Card,\n  Backdrop,\n  CircularProgress,\n  Divider,\n  TextField,\n  IconButton,\n} from \"@mui/material\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\nimport HeaderBreadcrumbs from \"src/components/HeaderBreadcrumbs\";\nimport Scrollbar from \"src/components/Scrollbar\";\nimport { Button, Grid, Stack } from \"@mui/material\";\nimport { useEffect, useRef, useState } from \"react\";\nimport ReactCrop from \"react-image-crop\";\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport \"react-image-crop/dist/ReactCrop.css\";\nimport Iconify from \"src/components/Iconify\";\nimport Select from \"react-select\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"src/redux/store\";\nimport { useSnackbar } from \"notistack\";\nimport { ListBrands, ListCities, ListStates } from \"src/redux/slices/brand\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport { OneCoupon, updateCoupon } from \"src/redux/slices/coupon\";\nimport { DemoContainer } from \"@mui/x-date-pickers/internals/demo\";\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport RemoveCircleIcon from \"@mui/icons-material/RemoveCircle\";\nimport dayjs from \"dayjs\";\nimport { v4 } from \"uuid\";\nimport { AnimatePresence } from \"framer-motion\";\nimport { PATH_DASHBOARD } from \"src/routes/paths\";\n\nexport default function UpdateCouponForm() {\n  const [imageDimensions, setImageDimensions] = useState({\n    width: 0,\n    height: 0,\n  });\n  const [src, setSrc] = useState(null);\n  const [image, setImage] = useState(\"\");\n  const [processing, setProcessing] = useState(false);\n  const [city, setCity] = useState(null);\n  const [selectedCities, setSelectedCities] = useState([]);\n  const [brand, setBrand] = useState(null);\n  const [selectedBrand, setSelectedBrand] = useState({ value: \"\", label: \"\" });\n  const [selectedState, setSelectedState] = useState();\n  const [stateOptions, setStateOptions] = useState([]);\n  const [crop, setCrop] = useState();\n  const [croppedImageUrls, setCroppedImageUrls] = useState([]);\n  const [prevCrop, setPrevCrop] = useState();\n  const [prevCrops, setPrevCrops] = useState([]);\n  const [cityOptions, setCityOptions] = useState([]);\n  const [fromDate, setFromDate] = useState(null);\n  const [toDate, setToDate] = useState(null);\n  const [cropNames, setCropNames] = useState([]);\n  const imgRef = useRef(null);\n  const [nameId, setNameId] = useState(null);\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const { couponId } = useParams();\n\n  let today = new Date();\n\n  useEffect(() => {\n    dispatch(OneCoupon(couponId));\n  }, []);\n\n  const coupon = useSelector((state) => state?.coupon?.coupon);\n  {\n  }\n\n  useEffect(() => {\n    setSelectedBrand({\n      value: coupon?.brand?.brand_name,\n      label: coupon?.brand?.id,\n    });\n\n    setSelectedState({\n      value: coupon?.state?.id,\n      label: coupon?.state?.name,\n    });\n\n    setSelectedCities(\n      coupon?.cities?.map((item) => {\n        return { value: item?.id, label: item?.name };\n      })\n    );\n\n    setFromDate(dayjs(coupon?.start_date));\n    setToDate(dayjs(coupon?.expiry_date));\n    setImage(coupon?.image);\n    setSrc(coupon?.image);\n\n    let coordinate = [];\n    let cropImages = [];\n    let cropNames = [];\n    coupon?.crop_images?.map((image, index) => {\n      coordinate.push(image?.crop_coordinate);\n      cropImages.push({ id: image?.id, url: image?.url });\n      cropNames.push({ id: image?.id, name: image?.name });\n    });\n\n    setCroppedImageUrls(cropImages);\n    setPrevCrops(coordinate);\n    setCropNames(cropNames);\n  }, [coupon]);\n\n  const handleCropComplete = async (crop, pixelCrop) => {\n    if (imgRef.current && crop.width && crop.height) {\n      const canvas = document.createElement(\"canvas\");\n      console.log({ \"pixelCrop=============>>>>\": pixelCrop });\n      const ctx = canvas.getContext(\"2d\");\n\n      if (ctx && imgRef.current) {\n        const image = await imgRef.current;\n        const scaleX = image.naturalWidth / image.width;\n        const scaleY = image.naturalHeight / image.height;\n        const pixelRatio = window.devicePixelRatio;\n        canvas.width = Math.floor(crop.width * scaleX * pixelRatio);\n        canvas.height = Math.floor(crop.height * scaleY * pixelRatio);\n        ctx.scale(pixelRatio, pixelRatio);\n        ctx.imageSmoothingQuality = \"high\";\n        const scale = 1;\n        const cropX = crop.x * scaleX;\n        const cropY = crop.y * scaleY;\n\n        ctx.save();\n\n        ctx.scale(scale, scale);\n\n        ctx.drawImage(\n          imgRef.current,\n          cropX,\n          cropY,\n          canvas.width,\n          canvas.height,\n          0,\n          0,\n          canvas.width,\n          canvas.height\n        );\n\n        if (\n          !prevCrop ||\n          crop.x !== prevCrop.x ||\n          crop.y !== prevCrop.y ||\n          crop.width !== prevCrop.width ||\n          crop.height !== prevCrop.height\n        ) {\n          var id = v4();\n          setNameId(id);\n          setPrevCrop({ ...crop, id });\n\n          setPrevCrops([...prevCrops, { ...crop, id }]);\n\n          setCroppedImageUrls([\n            ...croppedImageUrls,\n            { id, url: canvas.toDataURL() },\n          ]);\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    dispatch(ListCities());\n    dispatch(ListBrands());\n    dispatch(ListStates());\n  }, []);\n  const selectedBrandId = selectedBrand?.label;\n\n  const brandList = useSelector((state) => state?.brand?.brandList);\n  const cityList = useSelector((state) => state?.brand?.cities);\n  const selectedStateId = selectedState?.value;\n  const states = brandList?.find(\n    (brand) => brand.id === selectedBrandId\n  )?.states;\n  const cities = cityList?.filter((city) => city.state_id === selectedStateId);\n  const error = useSelector((state) => state?.brand?.error);\n\n  useEffect(() => {\n    if (error) {\n      enqueueSnackbar(error.message, { variant: \"error\" });\n    }\n  }, [error]);\n\n  useEffect(() => {\n    if (cityList && selectedState) {\n      const newCityOptions = cities?.map((item) => {\n        return { value: item?.id, label: item?.name };\n      });\n      const allCitiesOption = {\n        value: \"all-cities\",\n        label: \"Select all Cities\",\n      };\n      setCityOptions([allCitiesOption, ...newCityOptions]);\n    }\n  }, [cityList, selectedState]);\n\n  useEffect(() => {\n    if (states) {\n      const newStateOptions = states?.map((item) => {\n        return { value: item?.id, label: item?.name };\n      });\n\n      setStateOptions(newStateOptions);\n    }\n  }, [states]);\n\n  const handleChangeCitiesData = (value) => {\n    const optionsWithoutAllCities = cityOptions.filter(\n      (option) => option.value !== \"all-cities\"\n    );\n    if (value.some((option) => option.value === \"all-cities\")) {\n      setSelectedCities(optionsWithoutAllCities);\n    } else {\n      setSelectedCities(value);\n    }\n  };\n\n  const handleChangeStateData = (selectedOption) => {\n    setSelectedState(selectedOption);\n    setSelectedCities([]);\n  };\n\n  const handleNameChange = (index, name) => {\n    const newCropNames = [...cropNames];\n    newCropNames[index] = { id: nameId, name };\n    setCropNames(newCropNames);\n    // setSelectedState(selectedOptions);\n    // setSelectedCities([]);\n  };\n\n  // Helper function to convert a data URL to a Blob object\n  const dataURLtoBlob = (dataURL) => {\n    const arr = dataURL?.url.split(\",\");\n    const mime = arr[0]?.match(/:(.*?);/)[1];\n    const bstr = atob(arr[1]);\n    let n = bstr.length;\n    const u8arr = new Uint8Array(n);\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n    }\n    return new Blob([u8arr], { type: mime });\n  };\n\n  const s3bucketBlob = async (dataURL) => {\n    try {\n      const response = await fetch(dataURL);\n      return await response.blob();\n    } catch (error) {\n      console.log({ error });\n    }\n  };\n\n  const onSubmitHandle = async () => {\n    const currentDate = Date.now();\n\n    if (!selectedBrand) {\n      enqueueSnackbar(\"Please select the brand\", { variant: \"error\" });\n      return;\n    } else if (!selectedCities.length) {\n      enqueueSnackbar(\"Please select atleast one city\", { variant: \"error\" });\n      return;\n    } else if (!selectedState) {\n      enqueueSnackbar(\"Please select state\", { variant: \"error\" });\n      return;\n    } else if (!fromDate || !toDate) {\n      enqueueSnackbar(\"Please select the date\", { variant: \"error\" });\n      return;\n    } else if (toDate < fromDate || toDate < currentDate) {\n      enqueueSnackbar(\"Please add a valid TO date\", {\n        variant: \"error\",\n      });\n      return;\n    } else if (fromDate < dayjs(today).startOf(\"day\").valueOf()) {\n      enqueueSnackbar(\"Please add a valid FROM date\", {\n        variant: \"error\",\n      });\n      return;\n    } else if (!image) {\n      enqueueSnackbar(\"Please upload a image\", { variant: \"error\" });\n      return;\n    } else {\n      setProcessing(true);\n    }\n    let citiesId = selectedCities?.map((item) => item?.value);\n    const coordinate = JSON.stringify(prevCrops);\n    let formdata = new FormData();\n    let state_id = selectedState?.value;\n\n    formdata.append(\"image\", image);\n    citiesId.map((item) => {\n      formdata.append(\"city_id\", item);\n    });\n    formdata.append(\"start_date\", fromDate);\n    formdata.append(\"expiry_date\", toDate);\n    formdata.append(\"state_id\", state_id);\n\n    formdata.append(\"crop_coordinate\", coordinate);\n    croppedImageUrls.forEach(async (url, index) => {\n      const name = cropNames[index];\n\n      formdata.append(\"crop_image_name\", name.name);\n      console.log(url, \"url ===============>\");\n      console.log(\"crop_image_name\", name);\n      if (url.url.startsWith(\"data:image/png;base64\")) {\n        if (url) {\n          const blob = dataURLtoBlob(url);\n          formdata.append(\"crop_images\", blob, `${name.name}.png`);\n          console.log(\"crop_images\", blob, `${name.name}.png`);\n        }\n      } else {\n        formdata.append(\"crop_url\", url.url);\n        console.log(\"crop_url\", url.url);\n        console.log(\"Not a Base64-encoded image\");\n      }\n      formdata.append(\"crop_image_id\", url.id);\n      console.log(\"url.id\", url.id);\n    });\n\n    const data = await dispatch(updateCoupon(couponId, formdata));\n    if (data?.status) {\n      enqueueSnackbar(\"Coupon SuccessFully Updated!!\");\n      setSelectedBrand(null);\n      setSelectedState(null);\n      setSelectedCities([]);\n      setImage(null);\n      setCroppedImageUrls([]);\n      setFromDate(null);\n      setToDate(null);\n      setSrc(null);\n      setPrevCrop(null);\n      setPrevCrops([]);\n      setCrop(null);\n      // fileInputRef.current.value = null;\n    }\n    setProcessing(false);\n    navigate(PATH_DASHBOARD.general.coupon);\n  };\n\n  const handleDeleteCrop = (id) => {\n    setCroppedImageUrls(croppedImageUrls.filter((crop) => crop.id !== id));\n    setPrevCrops(prevCrops.filter((crop) => crop.id !== id));\n    setCropNames(cropNames.filter((crop) => crop.id !== id));\n  };\n  const navigate = useNavigate();\n  const handleBack = () => {\n    navigate(PATH_DASHBOARD.general.coupon);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"popstate\", handleBack);\n\n    return () => {\n      window.removeEventListener(\"popstate\", handleBack);\n    };\n  }, []);\n\n  return (\n    <>\n      {processing && (\n        <Backdrop\n          open={processing}\n          sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }}\n        >\n          <CircularProgress color=\"inherit\" />\n        </Backdrop>\n      )}\n      <AnimatePresence>\n        <Card>\n          <HeaderBreadcrumbs\n            heading={\n              <Stack direction=\"row\" alignItems=\"center\">\n                <IconButton onClick={handleBack}>\n                  <ArrowBackIcon />\n                </IconButton>\n                <span style={{ marginLeft: 8 }}>Edit Coupon</span>\n              </Stack>\n            }\n            links={[]}\n            sx={{ m: 2 }}\n            action={\n              <Button\n                variant=\"contained\"\n                startIcon={<Iconify icon={\"eva:plus-fill\"} />}\n                onClick={() => {\n                  onSubmitHandle();\n                }}\n              >\n                Save\n              </Button>\n            }\n          />\n          <Scrollbar>\n            <Stack spacing={3} sx={{ p: \"24px 24px 82px\", minHeight: \"500px\" }}>\n              <Grid container spacing={3} sx={{ mb: 2 }}>\n                <Grid item xs={12} md={12}>\n                  <Stack spacing={3} direction=\"row\" sx={{ mt: 2 }}>\n                    <InputLabel\n                      id=\"brand-label\"\n                      style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        fontWeight: 900,\n                      }}\n                    >\n                      Brand\n                    </InputLabel>\n\n                    <TextField\n                      disabled\n                      id=\"outlined-read-only-input\"\n                      defaultValue=\"Hello World\"\n                      value={selectedBrand?.value}\n                      InputProps={{\n                        readOnly: true,\n                      }}\n                    />\n                  </Stack>\n                  <Stack spacing={3} direction=\"row\" sx={{ mt: 2 }}>\n                    <InputLabel\n                      id=\"state-label\"\n                      style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        fontWeight: 900,\n                      }}\n                    >\n                      State\n                    </InputLabel>\n                    <Select\n                      placeholder={\"select state\"}\n                      options={stateOptions}\n                      value={selectedState}\n                      onChange={(value) => handleChangeStateData(value)}\n                    />\n                  </Stack>\n                  <Stack spacing={3} direction=\"row\" sx={{ mt: 2 }}>\n                    <InputLabel\n                      id=\"city-label\"\n                      style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        fontWeight: 900,\n                        marginRight: \"14px\",\n                      }}\n                    >\n                      City\n                    </InputLabel>\n                    <Select\n                      isMulti\n                      placeholder={\"select cities\"}\n                      options={cityOptions}\n                      value={selectedCities}\n                      onChange={(value) => handleChangeCitiesData(value)}\n                    />\n                  </Stack>\n                  <Stack spacing={3} direction=\"row\" sx={{ mt: 1 }}>\n                    <InputLabel\n                      id=\"expirydate-label\"\n                      style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        fontWeight: 900,\n                      }}\n                    >\n                      Expiry Date :\n                    </InputLabel>\n                    <InputLabel\n                      id=\"fromDate-label\"\n                      style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        fontWeight: 900,\n                        overflow: \"visible\",\n                      }}\n                    >\n                      From\n                    </InputLabel>\n\n                    <LocalizationProvider dateAdapter={AdapterDayjs}>\n                      <DemoContainer components={[\"DatePicker\"]}>\n                        <DatePicker\n                          label=\"Select Date\"\n                          value={fromDate}\n                          minDate={dayjs(today)}\n                          onChange={(date) => setFromDate(date)}\n                        />\n                      </DemoContainer>\n                    </LocalizationProvider>\n                    <InputLabel\n                      id=\"to-label\"\n                      style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        fontWeight: 900,\n                        overflow: \"visible\",\n                      }}\n                    >\n                      To\n                    </InputLabel>\n                    <LocalizationProvider dateAdapter={AdapterDayjs}>\n                      <DemoContainer components={[\"DatePicker\"]}>\n                        <DatePicker\n                          label=\"Select Date\"\n                          value={toDate}\n                          minDate={dayjs(today)}\n                          onChange={(date) => setToDate(date)}\n                        />\n                      </DemoContainer>\n                    </LocalizationProvider>\n                  </Stack>\n                  <Stack\n                    spacing={3}\n                    direction=\"row\"\n                    justifyContent=\"flex-start\"\n                    sx={{ mt: 2, mb: 3 }}\n                  >\n                    <InputLabel\n                      id=\"iamge-label\"\n                      style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        fontWeight: 900,\n                      }}\n                    >\n                      Image\n                    </InputLabel>\n                  </Stack>\n                  <Stack\n                    spacing={3}\n                    direction=\"row\"\n                    justifyContent=\"flex-start\"\n                    sx={{ mt: 1 }}\n                  />\n                  <div\n                    style={{\n                      position: \"relative\",\n                      display: \"flex\",\n                      flexDirection: \"row\",\n                      flexWrap: \"wrap\",\n                    }}\n                  >\n                    {src && (\n                      <div\n                        style={{\n                          position: \"relative\",\n                          marginRight: \"50px\",\n                        }}\n                      >\n                        <ReactCrop\n                          crop={crop}\n                          onChange={(c) => setCrop(c)}\n                          onComplete={handleCropComplete}\n                        >\n                          <img\n                            crossOrigin=\"anonymous\"\n                            ref={imgRef}\n                            src={src}\n                            alt=\"avatar\"\n                            style={{\n                              width: `${coupon?.image_dimension.main_image_width}px`,\n                              height: `${coupon?.image_dimension.main_image_height}px`,\n                              minWidth: `${coupon?.image_dimension.main_image_width}px`,\n                              minHeight: `${coupon?.image_dimension.main_image_height}px`,\n                              maxWidth: `${coupon?.image_dimension.main_image_width}px`,\n                              maxHeight: `${coupon?.image_dimension.main_image_height}px`,\n                            }}\n                          />\n                        </ReactCrop>\n                      </div>\n                    )}\n                    {crop &&\n                      prevCrops?.map((prevCrop, index) => (\n                        <div\n                          key={index}\n                          style={{\n                            position: \"absolute\",\n                            width: prevCrop?.width,\n                            height: prevCrop?.height,\n                            top: prevCrop?.y,\n                            left: prevCrop?.x,\n                            backgroundColor: \"rgba(188, 68, 68, 0.5)\",\n                            zIndex: 2,\n                          }}\n                        ></div>\n                      ))}\n                    {croppedImageUrls?.length > 0 && (\n                      <Stack\n                        spacing={3}\n                        direction=\"column\"\n                        justifyContent=\"flex-start\"\n                        sx={{ mt: 1, ml: 5 }}\n                      >\n                        {croppedImageUrls?.map((url, index) => (\n                          <div\n                            key={index}\n                            style={{\n                              display: \"flex\",\n                              flexDirection: \"row\",\n                              flexWrap: \"wrap\",\n                            }}\n                          >\n                            <div\n                              style={{\n                                position: \"relative\",\n                                width: \"100px\",\n                                height: \"100px\",\n                              }}\n                            >\n                              <img\n                                src={url.url}\n                                alt={`cropped-${index}`}\n                                style={{ width: \"100px\", height: \"100px\" }}\n                              />\n                              <div\n                                style={{\n                                  position: \"absolute\",\n                                  top: \"0\",\n                                  right: \"0\",\n                                  padding: \"5px\",\n                                  cursor: \"pointer\",\n                                  color: \"white\",\n                                  backgroundColor: \"rgba(0, 0, 0,0.5)\",\n                                  borderRadius: \"50%\",\n                                  display: \"flex\",\n                                  justifyContent: \"center\",\n                                  alignItems: \"center\",\n                                }}\n                              >\n                                <RemoveCircleIcon\n                                  onClick={() => handleDeleteCrop(url.id)}\n                                />\n                              </div>\n                            </div>\n                            <div>\n                              <input\n                                type=\"text\"\n                                name=\"name\"\n                                placeholder=\"Crop Coupon Name\"\n                                value={cropNames[index]?.name || \"\"}\n                                onChange={(event) =>\n                                  handleNameChange(index, event.target.value)\n                                }\n                                style={{\n                                  marginLeft: 20,\n                                  border: \"1px solid hsl(0, 0%, 80%)\",\n                                  transition:\n                                    \"opacity 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms\",\n                                  borderRadius: 5,\n                                  padding: 5,\n                                }}\n                              />\n                            </div>\n                          </div>\n                        ))}\n                      </Stack>\n                    )}\n                  </div>\n                </Grid>\n              </Grid>\n            </Stack>\n          </Scrollbar>\n          <Divider />\n        </Card>\n      </AnimatePresence>\n    </>\n  );\n}\n"],"sourceRoot":""}