{"version":3,"sources":["../node_modules/framer-motion/dist/es/gestures/utils/event-type.js","../node_modules/framer-motion/dist/es/events/event-info.js","../node_modules/framer-motion/dist/es/events/use-dom-event.js","../node_modules/framer-motion/dist/es/events/utils.js","../node_modules/framer-motion/dist/es/events/use-pointer-event.js","../node_modules/popmotion/dist/es/utils/is-point.js","../node_modules/popmotion/dist/es/utils/is-point-3d.js","../node_modules/popmotion/dist/es/utils/distance.js","../node_modules/framer-motion/dist/es/gestures/PanSession.js","../node_modules/framer-motion/dist/es/gestures/drag/utils/lock.js","../node_modules/framer-motion/dist/es/utils/each-axis.js","../node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.js","../node_modules/framer-motion/dist/es/render/dom/projection/measure.js","../node_modules/framer-motion/dist/es/utils/geometry/delta-calc.js","../node_modules/framer-motion/dist/es/render/utils/types.js","../node_modules/framer-motion/dist/es/motion/features/layout/utils.js","../node_modules/framer-motion/dist/es/render/utils/is-draggable.js","../node_modules/framer-motion/dist/es/utils/geometry/delta-apply.js","../node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.js","../node_modules/framer-motion/dist/es/render/dom/projection/convert-to-relative.js","../node_modules/framer-motion/dist/es/motion/utils/make-renderless-component.js","../node_modules/framer-motion/dist/es/motion/features/drag.js","../node_modules/framer-motion/dist/es/gestures/use-pan-gesture.js","../node_modules/framer-motion/dist/es/gestures/drag/use-drag.js","../node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.js","../node_modules/framer-motion/dist/es/render/dom/projection/default-scale-correctors.js","../node_modules/framer-motion/dist/es/motion/features/layout/Animate.js","../node_modules/framer-motion/dist/es/motion/features/layout/Measure.js","../node_modules/framer-motion/dist/es/motion/features/layout/index.js","../node_modules/framer-motion/dist/es/utils/shallow-compare.js","../node_modules/framer-motion/dist/es/render/utils/animation-state.js","../node_modules/framer-motion/dist/es/motion/features/animations.js","../node_modules/framer-motion/dist/es/gestures/use-hover-gesture.js","../node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.js","../node_modules/framer-motion/dist/es/motion/features/gestures.js","../node_modules/framer-motion/dist/es/gestures/use-tap-gesture.js","../node_modules/framer-motion/dist/es/gestures/use-focus-gesture.js","../node_modules/framer-motion/dist/es/render/utils/state.js","../node_modules/framer-motion/dist/es/render/html/utils/build-projection-transform.js","../node_modules/framer-motion/dist/es/render/utils/lifecycles.js","../node_modules/framer-motion/dist/es/render/utils/projection.js","../node_modules/framer-motion/dist/es/render/utils/flat-tree.js","../node_modules/framer-motion/dist/es/render/index.js","../node_modules/framer-motion/dist/es/render/utils/motion-values.js","../node_modules/framer-motion/dist/es/render/dom/projection/relative-set.js","../node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.js","../node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.js","../node_modules/framer-motion/dist/es/render/html/visual-element.js","../node_modules/framer-motion/dist/es/render/svg/visual-element.js","../node_modules/framer-motion/dist/es/render/dom/features-animation.js","../node_modules/framer-motion/dist/es/render/dom/create-visual-element.js","../node_modules/framer-motion/dist/es/render/dom/features-max.js"],"names":["isMouseEvent","event","PointerEvent","pointerType","MouseEvent","isTouchEvent","touches","defaultPagePoint","pageX","pageY","pointFromTouch","e","pointType","point","changedTouches","x","y","pointFromMouse","extractEventInfo","wrapHandler","handler","shouldFilterPrimaryPointer","eventHandler","listener","button","addDomEvent","target","eventName","options","addEventListener","removeEventListener","useDomEvent","ref","useEffect","element","current","supportsPointerEvents","isBrowser","window","onpointerdown","supportsTouchEvents","ontouchstart","supportsMouseEvents","onmousedown","mouseEventNames","pointerdown","pointermove","pointerup","pointercancel","pointerover","pointerout","pointerenter","pointerleave","touchEventNames","getPointerEventName","name","addPointerEvent","usePointerEvent","isPoint","hasOwnProperty","isPoint3D","distance1D","a","b","Math","abs","distance","isNum","xDelta","yDelta","zDelta","z","sqrt","pow","PanSession","handlers","_a","_this","this","transformPagePoint","startEvent","lastMoveEvent","lastMoveEventInfo","updatePoint","info","getPanInfo","history","isPanStarted","isDistancePastThreshold","offset","timestamp","getFrameData","push","__assign","onStart","onMove","handlePointerMove","transformPoint","buttons","handlePointerUp","sync","update","end","onEnd","onSessionEnd","panInfo","length","initialInfo","onSessionStart","removeListeners","pipe","prototype","updateHandlers","cancelSync","subtractPoint","delta","lastDevicePoint","startDevicePoint","velocity","getVelocity","timeDelta","i","timestampedPoint","lastPoint","secondsToMilliseconds","time","currentVelocity","Infinity","createLock","lock","globalHorizontalLock","globalVerticalLock","getGlobalLock","drag","openHorizontal_1","openVertical_1","isDragActive","openGestureLock","eachAxis","applyConstraints","elastic","min","max","undefined","mix","calcRelativeAxisConstraints","axis","calcViewportAxisConstraints","layoutAxis","constraintsAxis","__read","defaultElastic","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","getBoundingBox","box","getBoundingClientRect","convertBoundingBoxToAxisBox","transformBoundingBox","isNear","value","maxDistance","calcLength","calcOrigin","source","v","origin","sourceLength","targetLength","progress","clamp","updateAxisDelta","originPoint","scale","translate","updateBoxDelta","defaultOrigin","originX","originY","calcRelativeAxis","relative","parent","AnimationType","calcRelativeOffsetAxis","child","calcRelativeOffset","isDraggable","visualElement","getProps","_dragX","resetAxis","originAxis","scalePoint","applyPointDelta","boxScale","applyAxisDelta","applyBoxDelta","applyAxisTransforms","final","transforms","_b","key","scaleKey","originKey","axisOrigin","xKeys","yKeys","applyBoxTransforms","finalBox","removePointDelta","removeAxisTransforms","removeAxisDelta","removeBoxTransforms","lastPointerEvent","elementDragControls","WeakMap","VisualElementDragControls","isDragging","currentDirection","constraints","axisBox","props","hasMutatedConstraints","cursorProgress","openGlobalLock","panSession","enableLayoutProjection","set","start","originEvent","_c","snapToCursor","stopMotion","initialPoint","getViewportPointFromEvent","cancelLayout","call","batchLayout","read","write","ancestors","collectProjectingAncestors","children","collectProjectingChildren","tree","__spreadArray","hasManuallySetCursorOrigin","isLayoutDrag","lockProjectionTarget","forEach","resetTransform","updateLayoutMeasurement","restoreTransform","Boolean","getAxisMotionValue","isExternalDrag","rebaseProjectionTarget","measureViewportBox","scheduleUpdateLayoutProjection","projection","axisValue","get","flushSync","preRender","render","postRender","resolveDragConstraints","_d","dragPropagation","flushLayout","onDragStart","animationState","setActive","Drag","_e","dragDirectionLock","lockThreshold","direction","getCurrentDirection","onDirectionLock","updateAxis","onDrag","stop","dragConstraints","layout","getLayoutState","layoutCorrected","isRefObject","resolveRefConstraints","layoutBox","top","left","bottom","right","calcRelativeConstraints","resolveDragElastic","relativeConstraints","rebaseAxisConstraints","onMeasureDragConstraints","constraintsElement","invariant","constraintsBox","measuredConstraints","calcViewportConstraints","userConstraints","convertAxisBoxToBoundingBox","cancelDrag","unlockProjectionTarget","animateDragEnd","onDragEnd","shouldDrag","length_1","center","includes","updateAxisMotionValue","updateVisualElementAxis","nextValue","axisLayout","axisLength","axisProgress","calcConstrainedMinPoint","setProjectionTargetAxis","setProps","_f","_g","dragMomentum","remainingProps","__rest","layoutId","dragKey","toUpperCase","getValue","_dragY","dragTransition","isRelative","projectionParent","getProjectionParent","getLatestValues","convertToRelativeProjection","Object","keys","relativeConstraints_1","targetFinal","isNaN","momentumAnimations","transition","bounceStiffness","bounceDamping","inertia","type","timeConstant","restDelta","restSpeed","startAxisValueAnimation","startLayoutAnimation","Promise","all","then","onDragTransitionEnd","stopLayoutAnimation","currentValue","startAnimation","boxProgress","updateConstraints","calcPositionFromProgress","setTimeout","onReady","mount","stopPointerListener","getInstance","dragListener","stopResizeListener","stopLayoutUpdateListener","onLayoutUpdate","prevDragCursor","makeRenderlessComponent","hook","pan","onPan","onPanStart","onPanEnd","onPanSessionStart","hasPanEvents","useRef","useContext","MotionConfigContext","useUnmountEffect","groupDragControls","dragControls","useConstant","subscribe","isCSSVariable","startsWith","cssVariableRegex","maxDepth","getVariableValue","depth","match","exec","parseCSSVariable","token","fallback","resolved","getComputedStyle","getPropertyValue","trim","pixelsToPercent","pixels","varToken","borderCorrectionDefinition","process","latest","_layoutState","px","test","parseFloat","defaultScaleCorrectors","borderRadius","applyTo","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","boxShadow","treeScale","original","containsCSSVariables","cssVariables","replace","shadow","complex","parse","template","createTransformer","xScale","yScale","averageScale","output","i_1","cssVariable","Animate","_super","apply","arguments","frameTarget","currentAnimationTarget","isAnimating","stopAxisAnimation","isAnimatingTree","animate","originBox","targetBox","visibilityAction","shouldStackAnimate","onComplete","prevParent","config","safeToRemove","prevParentViewportBox","prevViewportBox","parentLayout","prev","next","prevId","getLayoutId","nextId","checkIfParentHasChanged","isProvidedCorrectDataForRelativeSharedLayout","boxHasMoved","isZeroBox","axisIsEqual","animations","isTargetLocked","animateAxis","setVisibility","VisibilityAction","Show","syncRender","notifyLayoutAnimationComplete","__extends","componentDidMount","animateMotionValue","unsubLayoutReady","layoutSafeToRemove","addScaleCorrection","componentWillUnmount","layoutProgress","getProjectionAnimationProgress","clearListeners","frame","p","tweenAxis","unsubscribeProgress","onChange","layoutTransition","getDefaultTransition","defaultLayoutTransition","getValueTransition","React","zeroAxis","duration","ease","Measure","syncLayout","framerSyncLayout","isSharedLayout","register","onUnmount","remove","getSnapshotBeforeUpdate","syncUpdate","snapshotViewportBox","add","componentDidUpdate","flush","React__default","Component","layoutAnimations","measureLayout","SharedLayoutContext","FramerTreeLayoutContext","createElement","layoutAnimation","usePresence","shallowCompare","Array","isArray","prevLength","variantPriorityOrder","Hover","Tap","Focus","Exit","reversePriorityOrder","reverse","numAnimationTypes","createAnimationState","map","animation","animateVisualElement","animateList","state","createTypeState","createState","allAnimatedKeys","isInitialRender","buildResolvedTypeValues","acc","definition","resolveVariant","transitionEnd","animateChanges","changedActiveType","context","getVariantContext","removedKeys","Set","encounteredKeys","removedVariantIndex","_loop_1","typeState","prop","propIsVariant","isVariantLabel","activeDelta","isActive","isInherited","manuallyAnimateOnMount","protectedKeys","prevProp","isAnimationControls","shouldAnimateType","isVariantLabels","variantsHaveChanged","definitionList","resolvedValues","reduce","prevResolvedValues","allKeys","markToAnimate","delete","needsAnimating","isKeyframesTarget","has","blockInitialAnimation","size","fallbackAnimation_1","fallbackTarget","getBaseTarget","shouldAnimate","initial","resolve","isAnimated","variantChildren","setAnimateFunction","makeAnimator","getState","exit","custom","isPresent","onExitComplete","presenceContext","PresenceContext","createHoverEvent","callback","isNodeOrChild","parentElement","gestureAnimations","tap","onTap","onTapStart","onTapCancel","whileTap","hasPressListeners","isPressing","cancelPointerEndListeners","removePointerEndListener","checkPointerEnd","onPointerUp","onPointerCancel","focus","whileFocus","hover","onHoverStart","onHoverEnd","whileHover","createLayoutState","isHydrated","deltaFinal","deltaTransform","zeroLayout","buildLayoutProjectionTransform","latestTransform","transform","rotate","rotateX","rotateY","identityProjection","buildLayoutProjectionTransformOrigin","names","updateLayoutDeltas","treePath","transformOrigin","treeLength","node","applyTreeDeltas","FlatTree","isDirty","addUniqueItem","removeItem","sort","compareByDepth","treeType","build","makeTargetAnimatable","renderInstance","readValueFromInstance","removeValueFromRenderState","sortNodePosition","scrapeMotionValuesFromProps","presenceId","visualState","instance","unsubscribeFromLeadVisualElement","crossfader","projectionTargetProgress","removeFromVariantTree","latestValues","renderState","lifecycles","managers","SubscriptionManager","propSubscriptions","clearAllListeners","manager","clear","updatePropListeners","on","propListener","args","_i","notify","createLifecycles","isEnabled","leadProjection","leadLatestValues","layoutState","hasViewportBoxUpdated","values","Map","valueSubscriptions","prevMotionValues","baseTarget","isProjectionReady","triggerBuild","valuesToRender","crossfadedValues","getCrossfadeState","notifyUpdate","updateTreeLayoutProjection","layoutTree","fireUpdateLayoutProjection","initialMotionValues","isMotionValue","isControllingVariants","checkIfControllingVariants","isVariantNode","checkIfVariantNode","path","isVisible","isMounted","newInstance","pointTo","addVariantChild","unmount","updateLayoutProjection","closestVariantNode","getClosestVariantNode","other","getStaticValue","setStaticValue","visibility","scheduleRender","canMutate","addValue","hasValue","removeValue","removeOnChange","latestValue","onUpdate","removeOnRenderRequest","onRenderRequest","bindToMotionValue","defaultValue","motionValue","forEachValue","readValue","setBaseTarget","newProps","prevValue","existingValue","hasAnimated","updateMotionValuesFromProps","getVariant","variants","startAtParent","context_1","numVariantProps","name_1","variantProps","setCrossfader","newCrossfader","relativeTarget","withTransform","viewportBox","notifySetAxisTarget","force","shouldRebase","notifyLayoutReady","relativeOffset","setCurrentViewportBox","notifyLayoutUpdate","prevTreeScaleX","prevTreeScaleY","prevDeltaTransform","notifyViewportBoxUpdate","fireResolveRelativeTargetBox","foundParent","ancestor","resolveRelativeTargetBox","relativeParent","parentProjection","calcRelativeBox","shouldResetTransform","_layoutResetTransform","newLead","onSetAxisTarget","onLayoutAnimationComplete","presence","Presence","Present","Entering","BoundingBoxDimension","positionalKeys","isPositionalKey","setAndResetVelocity","to","isNumOrPxType","number","getPosFromMatrix","matrix","pos","split","getTranslateFromMatrix","pos2","pos3","_bbox","matrix3d","transformKeys","nonTranslationalTransformKeys","transformProps","filter","positionalValues","width","height","checkAndConvertChangedValueTypes","targetPositionalKeys","removedTransformValues","hasAttemptedToRemoveTransformValues","changedValueTypeKeys","toType","from","fromType","findDimensionValueType","numKeyframes","removedTransforms","removeNonTranslationalTransform","convertedTarget","changedKeys","originBbox","elementComputedStyle","display","originComputedStyle","targetBbox","convertChangedValueTypes","unitConversion","some","hasPositionalKey","parseDomVariant","HTMLElement","resolveCSSVariables","htmlConfig","domElement","isTransformProp","defaultType","getDefaultValueType","default","computedStyle","compareDocumentPosition","style","transformTemplate","mutableState","vars","transformValues","getOrigin","checkTargetForNewValues","parsed","isProjectionTranform","buildHTMLStyles","renderHTML","htmlVisualElement","svgVisualElement","camelCaseAttributes","camelToDash","getAttribute","_element","buildSVGAttrs","renderSVG","domAnimation","renderer","isSVGComponent","enableHardwareAcceleration","domMax"],"mappings":"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","file":"static/js/14.a0b3f5cf.chunk.js","sourcesContent":["function isMouseEvent(event) {\n    // PointerEvent inherits from MouseEvent so we can't use a straight instanceof check.\n    if (typeof PointerEvent !== \"undefined\" && event instanceof PointerEvent) {\n        return !!(event.pointerType === \"mouse\");\n    }\n    return event instanceof MouseEvent;\n}\nfunction isTouchEvent(event) {\n    var hasTouches = !!event.touches;\n    return hasTouches;\n}\n\nexport { isMouseEvent, isTouchEvent };\n","import { isTouchEvent } from '../gestures/utils/event-type.js';\n\n/**\n * Filters out events not attached to the primary pointer (currently left mouse button)\n * @param eventHandler\n */\nfunction filterPrimaryPointer(eventHandler) {\n    return function (event) {\n        var isMouseEvent = event instanceof MouseEvent;\n        var isPrimaryPointer = !isMouseEvent ||\n            (isMouseEvent && event.button === 0);\n        if (isPrimaryPointer) {\n            eventHandler(event);\n        }\n    };\n}\nvar defaultPagePoint = { pageX: 0, pageY: 0 };\nfunction pointFromTouch(e, pointType) {\n    if (pointType === void 0) { pointType = \"page\"; }\n    var primaryTouch = e.touches[0] || e.changedTouches[0];\n    var point = primaryTouch || defaultPagePoint;\n    return {\n        x: point[pointType + \"X\"],\n        y: point[pointType + \"Y\"],\n    };\n}\nfunction pointFromMouse(point, pointType) {\n    if (pointType === void 0) { pointType = \"page\"; }\n    return {\n        x: point[pointType + \"X\"],\n        y: point[pointType + \"Y\"],\n    };\n}\nfunction extractEventInfo(event, pointType) {\n    if (pointType === void 0) { pointType = \"page\"; }\n    return {\n        point: isTouchEvent(event)\n            ? pointFromTouch(event, pointType)\n            : pointFromMouse(event, pointType),\n    };\n}\nfunction getViewportPointFromEvent(event) {\n    return extractEventInfo(event, \"client\");\n}\nvar wrapHandler = function (handler, shouldFilterPrimaryPointer) {\n    if (shouldFilterPrimaryPointer === void 0) { shouldFilterPrimaryPointer = false; }\n    var listener = function (event) {\n        return handler(event, extractEventInfo(event));\n    };\n    return shouldFilterPrimaryPointer\n        ? filterPrimaryPointer(listener)\n        : listener;\n};\n\nexport { extractEventInfo, getViewportPointFromEvent, wrapHandler };\n","import { useEffect } from 'react';\n\nfunction addDomEvent(target, eventName, handler, options) {\n    target.addEventListener(eventName, handler, options);\n    return function () { return target.removeEventListener(eventName, handler, options); };\n}\n/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */\nfunction useDomEvent(ref, eventName, handler, options) {\n    useEffect(function () {\n        var element = ref.current;\n        if (handler && element) {\n            return addDomEvent(element, eventName, handler, options);\n        }\n    }, [ref, eventName, handler, options]);\n}\n\nexport { addDomEvent, useDomEvent };\n","import { isBrowser } from '../utils/is-browser.js';\n\n// We check for event support via functions in case they've been mocked by a testing suite.\nvar supportsPointerEvents = function () {\n    return isBrowser && window.onpointerdown === null;\n};\nvar supportsTouchEvents = function () {\n    return isBrowser && window.ontouchstart === null;\n};\nvar supportsMouseEvents = function () {\n    return isBrowser && window.onmousedown === null;\n};\n\nexport { supportsMouseEvents, supportsPointerEvents, supportsTouchEvents };\n","import { useDomEvent, addDomEvent } from './use-dom-event.js';\nimport { wrapHandler } from './event-info.js';\nimport { supportsPointerEvents, supportsTouchEvents, supportsMouseEvents } from './utils.js';\n\nvar mouseEventNames = {\n    pointerdown: \"mousedown\",\n    pointermove: \"mousemove\",\n    pointerup: \"mouseup\",\n    pointercancel: \"mousecancel\",\n    pointerover: \"mouseover\",\n    pointerout: \"mouseout\",\n    pointerenter: \"mouseenter\",\n    pointerleave: \"mouseleave\",\n};\nvar touchEventNames = {\n    pointerdown: \"touchstart\",\n    pointermove: \"touchmove\",\n    pointerup: \"touchend\",\n    pointercancel: \"touchcancel\",\n};\nfunction getPointerEventName(name) {\n    if (supportsPointerEvents()) {\n        return name;\n    }\n    else if (supportsTouchEvents()) {\n        return touchEventNames[name];\n    }\n    else if (supportsMouseEvents()) {\n        return mouseEventNames[name];\n    }\n    return name;\n}\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, getPointerEventName(eventName), wrapHandler(handler, eventName === \"pointerdown\"), options);\n}\nfunction usePointerEvent(ref, eventName, handler, options) {\n    return useDomEvent(ref, getPointerEventName(eventName), handler && wrapHandler(handler, eventName === \"pointerdown\"), options);\n}\n\nexport { addPointerEvent, usePointerEvent };\n","var isPoint = function (point) {\n    return point.hasOwnProperty('x') && point.hasOwnProperty('y');\n};\n\nexport { isPoint };\n","import { isPoint } from './is-point.js';\n\nvar isPoint3D = function (point) {\n    return isPoint(point) && point.hasOwnProperty('z');\n};\n\nexport { isPoint3D };\n","import { isPoint } from './is-point.js';\nimport { isPoint3D } from './is-point-3d.js';\nimport { isNum } from './inc.js';\n\nvar distance1D = function (a, b) { return Math.abs(a - b); };\nfunction distance(a, b) {\n    if (isNum(a) && isNum(b)) {\n        return distance1D(a, b);\n    }\n    else if (isPoint(a) && isPoint(b)) {\n        var xDelta = distance1D(a.x, b.x);\n        var yDelta = distance1D(a.y, b.y);\n        var zDelta = isPoint3D(a) && isPoint3D(b) ? distance1D(a.z, b.z) : 0;\n        return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2) + Math.pow(zDelta, 2));\n    }\n}\n\nexport { distance };\n","import { __assign } from 'tslib';\nimport { isMouseEvent, isTouchEvent } from './utils/event-type.js';\nimport { extractEventInfo } from '../events/event-info.js';\nimport sync, { getFrameData, cancelSync } from 'framesync';\nimport { secondsToMilliseconds } from '../utils/time-conversion.js';\nimport { addPointerEvent } from '../events/use-pointer-event.js';\nimport { distance, pipe } from 'popmotion';\n\n/**\n * @internal\n */\nvar PanSession = /** @class */ (function () {\n    function PanSession(event, handlers, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, transformPagePoint = _b.transformPagePoint;\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        this.updatePoint = function () {\n            if (!(_this.lastMoveEvent && _this.lastMoveEventInfo))\n                return;\n            var info = getPanInfo(_this.lastMoveEventInfo, _this.history);\n            var isPanStarted = _this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            var isDistancePastThreshold = distance(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            var point = info.point;\n            var timestamp = getFrameData().timestamp;\n            _this.history.push(__assign(__assign({}, point), { timestamp: timestamp }));\n            var _a = _this.handlers, onStart = _a.onStart, onMove = _a.onMove;\n            if (!isPanStarted) {\n                onStart && onStart(_this.lastMoveEvent, info);\n                _this.startEvent = _this.lastMoveEvent;\n            }\n            onMove && onMove(_this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = function (event, info) {\n            _this.lastMoveEvent = event;\n            _this.lastMoveEventInfo = transformPoint(info, _this.transformPagePoint);\n            // Because Safari doesn't trigger mouseup events when it's above a `<select>`\n            if (isMouseEvent(event) && event.buttons === 0) {\n                _this.handlePointerUp(event, info);\n                return;\n            }\n            // Throttle mouse move event to once per frame\n            sync.update(_this.updatePoint, true);\n        };\n        this.handlePointerUp = function (event, info) {\n            _this.end();\n            var _a = _this.handlers, onEnd = _a.onEnd, onSessionEnd = _a.onSessionEnd;\n            var panInfo = getPanInfo(transformPoint(info, _this.transformPagePoint), _this.history);\n            if (_this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (isTouchEvent(event) && event.touches.length > 1)\n            return;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        var info = extractEventInfo(event);\n        var initialInfo = transformPoint(info, this.transformPagePoint);\n        var point = initialInfo.point;\n        var timestamp = getFrameData().timestamp;\n        this.history = [__assign(__assign({}, point), { timestamp: timestamp })];\n        var onSessionStart = handlers.onSessionStart;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(window, \"pointermove\", this.handlePointerMove), addPointerEvent(window, \"pointerup\", this.handlePointerUp), addPointerEvent(window, \"pointercancel\", this.handlePointerUp));\n    }\n    PanSession.prototype.updateHandlers = function (handlers) {\n        this.handlers = handlers;\n    };\n    PanSession.prototype.end = function () {\n        this.removeListeners && this.removeListeners();\n        cancelSync.update(this.updatePoint);\n    };\n    return PanSession;\n}());\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo(_a, history) {\n    var point = _a.point;\n    return {\n        point: point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    var i = history.length - 1;\n    var timestampedPoint = null;\n    var lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    var time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1000;\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    var currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","function createLock(name) {\n    var lock = null;\n    return function () {\n        var openLock = function () {\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nvar globalHorizontalLock = createLock(\"dragHorizontal\");\nvar globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    var lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    }\n    else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    }\n    else {\n        var openHorizontal_1 = globalHorizontalLock();\n        var openVertical_1 = globalVerticalLock();\n        if (openHorizontal_1 && openVertical_1) {\n            lock = function () {\n                openHorizontal_1();\n                openVertical_1();\n            };\n        }\n        else {\n            // Release the locks because we don't use them\n            if (openHorizontal_1)\n                openHorizontal_1();\n            if (openVertical_1)\n                openVertical_1();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    var openGestureLock = getGlobalLock(true);\n    if (!openGestureLock)\n        return true;\n    openGestureLock();\n    return false;\n}\n\nexport { createLock, getGlobalLock, isDragActive };\n","// Call a handler once for each axis\nfunction eachAxis(handler) {\n    return [handler(\"x\"), handler(\"y\")];\n}\n\nexport { eachAxis };\n","import { __read } from 'tslib';\nimport { mix } from 'popmotion';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, _a, elastic) {\n    var min = _a.min, max = _a.max;\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculates a min projection point based on a pointer, pointer progress\n * within the drag target, and constraints.\n *\n * For instance if an element was 100px width, we were dragging from 0.25\n * along this axis, the pointer is at 200px, and there were no constraints,\n * we would calculate a min projection point of 175px.\n */\nfunction calcConstrainedMinPoint(point, length, progress, constraints, elastic) {\n    // Calculate a min point for this axis and apply it to the current pointer\n    var min = point - length * progress;\n    return constraints ? applyConstraints(min, constraints, elastic) : min;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, _a) {\n    var top = _a.top, left = _a.left, bottom = _a.bottom, right = _a.right;\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    var _a;\n    var min = constraintsAxis.min - layoutAxis.min;\n    var max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        _a = __read([max, min], 2), min = _a[0], max = _a[1];\n    }\n    return {\n        min: layoutAxis.min + min,\n        max: layoutAxis.min + max,\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate the an axis position based on two axes and a progress value.\n */\nfunction calcPositionFromProgress(axis, constraints, progress) {\n    var axisLength = axis.max - axis.min;\n    var min = mix(constraints.min, constraints.max - axisLength, progress);\n    return { min: min, max: min + axisLength };\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    var relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nvar defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    var _a;\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : (_a = dragElastic[label]) !== null && _a !== void 0 ? _a : 0;\n}\n\nexport { applyConstraints, calcConstrainedMinPoint, calcPositionFromProgress, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","import { convertBoundingBoxToAxisBox, transformBoundingBox } from '../../../utils/geometry/index.js';\n\n/**\n * Measure and return the element bounding box.\n *\n * We convert the box into an AxisBox2D to make it easier to work with each axis\n * individually and programmatically.\n *\n * This function optionally accepts a transformPagePoint function which allows us to compensate\n * for, for instance, measuring the element within a scaled plane like a Framer devivce preview component.\n */\nfunction getBoundingBox(element, transformPagePoint) {\n    var box = element.getBoundingClientRect();\n    return convertBoundingBoxToAxisBox(transformBoundingBox(box, transformPagePoint));\n}\n\nexport { getBoundingBox };\n","import { mix, distance, clamp, progress } from 'popmotion';\n\nvar clampProgress = function (v) { return clamp(0, 1, v); };\n/**\n * Returns true if the provided value is within maxDistance of the provided target\n */\nfunction isNear(value, target, maxDistance) {\n    if (target === void 0) { target = 0; }\n    if (maxDistance === void 0) { maxDistance = 0.01; }\n    return distance(value, target) < maxDistance;\n}\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    var origin = 0.5;\n    var sourceLength = calcLength(source);\n    var targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clampProgress(origin);\n}\n/**\n * Update the AxisDelta with a transform that projects source into target.\n *\n * The transform `origin` is optional. If not provided, it'll be automatically\n * calculated based on the relative positions of the two bounding boxes.\n */\nfunction updateAxisDelta(delta, source, target, origin) {\n    if (origin === void 0) { origin = 0.5; }\n    delta.origin = origin;\n    delta.originPoint = mix(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001))\n        delta.scale = 1;\n    delta.translate =\n        mix(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate))\n        delta.translate = 0;\n}\n/**\n * Update the BoxDelta with a transform that projects the source into the target.\n *\n * The transform `origin` is optional. If not provided, it'll be automatically\n * calculated based on the relative positions of the two bounding boxes.\n */\nfunction updateBoxDelta(delta, source, target, origin) {\n    updateAxisDelta(delta.x, source.x, target.x, defaultOrigin(origin.originX));\n    updateAxisDelta(delta.y, source.y, target.y, defaultOrigin(origin.originY));\n}\n/**\n * Currently this only accepts numerical origins, measured as 0-1, but could\n * accept pixel values by comparing to the target axis.\n */\nfunction defaultOrigin(origin) {\n    return typeof origin === \"number\" ? origin : 0.5;\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(projection, parentProjection) {\n    calcRelativeAxis(projection.target.x, projection.relativeTarget.x, parentProjection.target.x);\n    calcRelativeAxis(projection.target.y, projection.relativeTarget.y, parentProjection.target.y);\n}\n\nexport { calcOrigin, calcRelativeAxis, calcRelativeBox, isNear, updateAxisDelta, updateBoxDelta };\n","var AnimationType;\n(function (AnimationType) {\n    AnimationType[\"Animate\"] = \"animate\";\n    AnimationType[\"Hover\"] = \"whileHover\";\n    AnimationType[\"Tap\"] = \"whileTap\";\n    AnimationType[\"Drag\"] = \"whileDrag\";\n    AnimationType[\"Focus\"] = \"whileFocus\";\n    AnimationType[\"Exit\"] = \"exit\";\n})(AnimationType || (AnimationType = {}));\n\nexport { AnimationType };\n","import { mix } from 'popmotion';\n\nfunction tweenAxis(target, prev, next, p) {\n    target.min = mix(prev.min, next.min, p);\n    target.max = mix(prev.max, next.max, p);\n}\nfunction calcRelativeOffsetAxis(parent, child) {\n    return {\n        min: child.min - parent.min,\n        max: child.max - parent.min,\n    };\n}\nfunction calcRelativeOffset(parent, child) {\n    return {\n        x: calcRelativeOffsetAxis(parent.x, child.x),\n        y: calcRelativeOffsetAxis(parent.y, child.y),\n    };\n}\nfunction checkIfParentHasChanged(prev, next) {\n    var prevId = prev.getLayoutId();\n    var nextId = next.getLayoutId();\n    return prevId !== nextId || (nextId === undefined && prev !== next);\n}\n\nexport { calcRelativeOffset, calcRelativeOffsetAxis, checkIfParentHasChanged, tweenAxis };\n","function isDraggable(visualElement) {\n    var _a = visualElement.getProps(), drag = _a.drag, _dragX = _a._dragX;\n    return drag && !_dragX;\n}\n\nexport { isDraggable };\n","import { __read } from 'tslib';\nimport { mix } from 'popmotion';\nimport { isDraggable } from '../../render/utils/is-draggable.js';\n\n/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction resetAxis(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction resetBox(box, originBox) {\n    resetAxis(box.x, originBox.x);\n    resetAxis(box.y, originBox.y);\n}\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    var distanceFromOrigin = point - originPoint;\n    var scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate, scale, originPoint, boxScale) {\n    if (translate === void 0) { translate = 0; }\n    if (scale === void 0) { scale = 1; }\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, _a) {\n    var x = _a.x, y = _a.y;\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction applyAxisTransforms(final, axis, transforms, _a) {\n    var _b = __read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];\n    // Copy the current axis to the final axis before mutation\n    final.min = axis.min;\n    final.max = axis.max;\n    var axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n    var originPoint = mix(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(final, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nvar xKeys = [\"x\", \"scaleX\", \"originX\"];\nvar yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction applyBoxTransforms(finalBox, box, transforms) {\n    applyAxisTransforms(finalBox.x, box.x, transforms, xKeys);\n    applyAxisTransforms(finalBox.y, box.y, transforms, yKeys);\n}\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate, scale, origin, boxScale) {\n    if (translate === void 0) { translate = 0; }\n    if (scale === void 0) { scale = 1; }\n    if (origin === void 0) { origin = 0.5; }\n    var originPoint = mix(axis.min, axis.max, origin) - translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, _a) {\n    var _b = __read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale);\n}\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms) {\n    removeAxisTransforms(box.x, transforms, xKeys);\n    removeAxisTransforms(box.y, transforms, yKeys);\n}\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath) {\n    var treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    var node;\n    var delta;\n    for (var i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.getLayoutState().delta;\n        // Incoporate each ancestor's scale into a culmulative treeScale for this component\n        treeScale.x *= delta.x.scale;\n        treeScale.y *= delta.y.scale;\n        // Apply each ancestor's calculated delta into this component's recorded layout box\n        applyBoxDelta(box, delta);\n        // If this is a draggable ancestor, also incorporate the node's transform to the layout box\n        if (isDraggable(node)) {\n            applyBoxTransforms(box, box, node.getLatestValues());\n        }\n    }\n}\n\nexport { applyAxisDelta, applyAxisTransforms, applyBoxDelta, applyBoxTransforms, applyPointDelta, applyTreeDeltas, removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta, resetAxis, resetBox, scalePoint };\n","import { __rest, __assign, __spreadArray, __read } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { PanSession } from '../PanSession.js';\nimport { getGlobalLock } from './utils/lock.js';\nimport { isRefObject } from '../../utils/is-ref-object.js';\nimport { addPointerEvent } from '../../events/use-pointer-event.js';\nimport { addDomEvent } from '../../events/use-dom-event.js';\nimport { getViewportPointFromEvent } from '../../events/event-info.js';\nimport { axisBox, convertAxisBoxToBoundingBox, convertBoundingBoxToAxisBox } from '../../utils/geometry/index.js';\nimport { eachAxis } from '../../utils/each-axis.js';\nimport { calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, applyConstraints, calcConstrainedMinPoint, calcPositionFromProgress, defaultElastic } from './utils/constraints.js';\nimport { getBoundingBox } from '../../render/dom/projection/measure.js';\nimport { calcOrigin } from '../../utils/geometry/delta-calc.js';\nimport { startAnimation } from '../../animation/utils/transitions.js';\nimport { AnimationType } from '../../render/utils/types.js';\nimport { collectProjectingAncestors, updateLayoutMeasurement, collectProjectingChildren } from '../../render/dom/projection/utils.js';\nimport { progress } from 'popmotion';\nimport { convertToRelativeProjection } from '../../render/dom/projection/convert-to-relative.js';\nimport { calcRelativeOffset } from '../../motion/features/layout/utils.js';\nimport { flushLayout, batchLayout } from '../../render/dom/utils/batch-layout.js';\nimport { flushSync } from 'framesync';\n\nvar elementDragControls = new WeakMap();\n/**\n *\n */\nvar lastPointerEvent;\nvar VisualElementDragControls = /** @class */ (function () {\n    function VisualElementDragControls(_a) {\n        var visualElement = _a.visualElement;\n        /**\n         * Track whether we're currently dragging.\n         *\n         * @internal\n         */\n        this.isDragging = false;\n        /**\n         * The current direction of drag, or `null` if both.\n         *\n         * @internal\n         */\n        this.currentDirection = null;\n        /**\n         * The permitted boundaries of travel, in pixels.\n         *\n         * @internal\n         */\n        this.constraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         *\n         * @internal\n         */\n        this.elastic = axisBox();\n        /**\n         * A reference to the host component's latest props.\n         *\n         * @internal\n         */\n        this.props = {};\n        /**\n         * @internal\n         */\n        this.hasMutatedConstraints = false;\n        /**\n         * Track the initial position of the cursor relative to the dragging element\n         * when dragging starts as a value of 0-1 on each axis. We then use this to calculate\n         * an ideal bounding box for the VisualElement renderer to project into every frame.\n         *\n         * @internal\n         */\n        this.cursorProgress = {\n            x: 0.5,\n            y: 0.5,\n        };\n        // When updating _dragX, or _dragY instead of the VisualElement,\n        // persist their values between drag gestures.\n        this.originPoint = {};\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        /**\n         * @internal\n         */\n        this.panSession = null;\n        this.visualElement = visualElement;\n        this.visualElement.enableLayoutProjection();\n        elementDragControls.set(visualElement, this);\n    }\n    /**\n     * Instantiate a PanSession for the drag gesture\n     *\n     * @public\n     */\n    VisualElementDragControls.prototype.start = function (originEvent, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, _c = _b.snapToCursor, snapToCursor = _c === void 0 ? false : _c, cursorProgress = _b.cursorProgress;\n        var onSessionStart = function (event) {\n            var _a;\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            _this.stopMotion();\n            /**\n             * Save the initial point. We'll use this to calculate the pointer's position rather\n             * than the one we receive when the gesture actually starts. By then, the pointer will\n             * have already moved, and the perception will be of the pointer \"slipping\" across the element\n             */\n            var initialPoint = getViewportPointFromEvent(event).point;\n            (_a = _this.cancelLayout) === null || _a === void 0 ? void 0 : _a.call(_this);\n            _this.cancelLayout = batchLayout(function (read, write) {\n                var ancestors = collectProjectingAncestors(_this.visualElement);\n                var children = collectProjectingChildren(_this.visualElement);\n                var tree = __spreadArray(__spreadArray([], __read(ancestors)), __read(children));\n                var hasManuallySetCursorOrigin = false;\n                /**\n                 * Apply a simple lock to the projection target. This ensures no animations\n                 * can run on the projection box while this lock is active.\n                 */\n                _this.isLayoutDrag() && _this.visualElement.lockProjectionTarget();\n                write(function () {\n                    tree.forEach(function (element) { return element.resetTransform(); });\n                });\n                read(function () {\n                    updateLayoutMeasurement(_this.visualElement);\n                    children.forEach(updateLayoutMeasurement);\n                });\n                write(function () {\n                    tree.forEach(function (element) { return element.restoreTransform(); });\n                    if (snapToCursor) {\n                        hasManuallySetCursorOrigin = _this.snapToCursor(initialPoint);\n                    }\n                });\n                read(function () {\n                    var isRelativeDrag = Boolean(_this.getAxisMotionValue(\"x\") && !_this.isExternalDrag());\n                    if (!isRelativeDrag) {\n                        _this.visualElement.rebaseProjectionTarget(true, _this.visualElement.measureViewportBox(false));\n                    }\n                    _this.visualElement.scheduleUpdateLayoutProjection();\n                    /**\n                     * When dragging starts, we want to find where the cursor is relative to the bounding box\n                     * of the element. Every frame, we calculate a new bounding box using this relative position\n                     * and let the visualElement renderer figure out how to reproject the element into this bounding\n                     * box.\n                     *\n                     * By doing it this way, rather than applying an x/y transform directly to the element,\n                     * we can ensure the component always visually sticks to the cursor as we'd expect, even\n                     * if the DOM element itself changes layout as a result of React updates the user might\n                     * make based on the drag position.\n                     */\n                    var projection = _this.visualElement.projection;\n                    eachAxis(function (axis) {\n                        if (!hasManuallySetCursorOrigin) {\n                            var _a = projection.target[axis], min = _a.min, max = _a.max;\n                            _this.cursorProgress[axis] = cursorProgress\n                                ? cursorProgress[axis]\n                                : progress(min, max, initialPoint[axis]);\n                        }\n                        /**\n                         * If we have external drag MotionValues, record their origin point. On pointermove\n                         * we'll apply the pan gesture offset directly to this value.\n                         */\n                        var axisValue = _this.getAxisMotionValue(axis);\n                        if (axisValue) {\n                            _this.originPoint[axis] = axisValue.get();\n                        }\n                    });\n                });\n                write(function () {\n                    flushSync.update();\n                    flushSync.preRender();\n                    flushSync.render();\n                    flushSync.postRender();\n                });\n                read(function () { return _this.resolveDragConstraints(); });\n            });\n        };\n        var onStart = function (event, info) {\n            var _a, _b, _c;\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            var _d = _this.props, drag = _d.drag, dragPropagation = _d.dragPropagation;\n            if (drag && !dragPropagation) {\n                if (_this.openGlobalLock)\n                    _this.openGlobalLock();\n                _this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!_this.openGlobalLock)\n                    return;\n            }\n            flushLayout();\n            // Set current drag status\n            _this.isDragging = true;\n            _this.currentDirection = null;\n            // Fire onDragStart event\n            (_b = (_a = _this.props).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, event, info);\n            (_c = _this.visualElement.animationState) === null || _c === void 0 ? void 0 : _c.setActive(AnimationType.Drag, true);\n        };\n        var onMove = function (event, info) {\n            var _a, _b, _c, _d;\n            var _e = _this.props, dragPropagation = _e.dragPropagation, dragDirectionLock = _e.dragDirectionLock;\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !_this.openGlobalLock)\n                return;\n            var offset = info.offset;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && _this.currentDirection === null) {\n                _this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (_this.currentDirection !== null) {\n                    (_b = (_a = _this.props).onDirectionLock) === null || _b === void 0 ? void 0 : _b.call(_a, _this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            _this.updateAxis(\"x\", info.point, offset);\n            _this.updateAxis(\"y\", info.point, offset);\n            // Fire onDrag event\n            (_d = (_c = _this.props).onDrag) === null || _d === void 0 ? void 0 : _d.call(_c, event, info);\n            // Update the last pointer event\n            lastPointerEvent = event;\n        };\n        var onSessionEnd = function (event, info) {\n            return _this.stop(event, info);\n        };\n        var transformPagePoint = this.props.transformPagePoint;\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart: onSessionStart,\n            onStart: onStart,\n            onMove: onMove,\n            onSessionEnd: onSessionEnd,\n        }, { transformPagePoint: transformPagePoint });\n    };\n    VisualElementDragControls.prototype.resolveDragConstraints = function () {\n        var _this = this;\n        var _a = this.props, dragConstraints = _a.dragConstraints, dragElastic = _a.dragElastic;\n        var layout = this.visualElement.getLayoutState().layoutCorrected;\n        if (dragConstraints) {\n            this.constraints = isRefObject(dragConstraints)\n                ? this.resolveRefConstraints(layout, dragConstraints)\n                : calcRelativeConstraints(layout, dragConstraints);\n        }\n        else {\n            this.constraints = false;\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (this.constraints && !this.hasMutatedConstraints) {\n            eachAxis(function (axis) {\n                if (_this.getAxisMotionValue(axis)) {\n                    _this.constraints[axis] = rebaseAxisConstraints(layout[axis], _this.constraints[axis]);\n                }\n            });\n        }\n    };\n    VisualElementDragControls.prototype.resolveRefConstraints = function (layoutBox, constraints) {\n        var _a = this.props, onMeasureDragConstraints = _a.onMeasureDragConstraints, transformPagePoint = _a.transformPagePoint;\n        var constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        this.constraintsBox = getBoundingBox(constraintsElement, transformPagePoint);\n        var measuredConstraints = calcViewportConstraints(layoutBox, this.constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            var userConstraints = onMeasureDragConstraints(convertAxisBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToAxisBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    };\n    VisualElementDragControls.prototype.cancelDrag = function () {\n        var _a, _b;\n        this.visualElement.unlockProjectionTarget();\n        (_a = this.cancelLayout) === null || _a === void 0 ? void 0 : _a.call(this);\n        this.isDragging = false;\n        this.panSession && this.panSession.end();\n        this.panSession = null;\n        if (!this.props.dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);\n    };\n    VisualElementDragControls.prototype.stop = function (event, info) {\n        var _a, _b, _c;\n        (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n        this.panSession = null;\n        var isDragging = this.isDragging;\n        this.cancelDrag();\n        if (!isDragging)\n            return;\n        var velocity = info.velocity;\n        this.animateDragEnd(velocity);\n        (_c = (_b = this.props).onDragEnd) === null || _c === void 0 ? void 0 : _c.call(_b, event, info);\n    };\n    VisualElementDragControls.prototype.snapToCursor = function (point) {\n        var _this = this;\n        return eachAxis(function (axis) {\n            var drag = _this.props.drag;\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, _this.currentDirection))\n                return;\n            var axisValue = _this.getAxisMotionValue(axis);\n            if (axisValue) {\n                var box = _this.visualElement.getLayoutState().layout;\n                var length_1 = box[axis].max - box[axis].min;\n                var center = box[axis].min + length_1 / 2;\n                var offset = point[axis] - center;\n                _this.originPoint[axis] = point[axis];\n                axisValue.set(offset);\n            }\n            else {\n                _this.cursorProgress[axis] = 0.5;\n                return true;\n            }\n        }).includes(true);\n    };\n    /**\n     * Update the specified axis with the latest pointer information.\n     */\n    VisualElementDragControls.prototype.updateAxis = function (axis, point, offset) {\n        var drag = this.props.drag;\n        // If we're not dragging this axis, do an early return.\n        if (!shouldDrag(axis, drag, this.currentDirection))\n            return;\n        return this.getAxisMotionValue(axis)\n            ? this.updateAxisMotionValue(axis, offset)\n            : this.updateVisualElementAxis(axis, point);\n    };\n    VisualElementDragControls.prototype.updateAxisMotionValue = function (axis, offset) {\n        var axisValue = this.getAxisMotionValue(axis);\n        if (!offset || !axisValue)\n            return;\n        var nextValue = this.originPoint[axis] + offset[axis];\n        var update = this.constraints\n            ? applyConstraints(nextValue, this.constraints[axis], this.elastic[axis])\n            : nextValue;\n        axisValue.set(update);\n    };\n    VisualElementDragControls.prototype.updateVisualElementAxis = function (axis, point) {\n        var _a;\n        // Get the actual layout bounding box of the element\n        var axisLayout = this.visualElement.getLayoutState().layout[axis];\n        // Calculate its current length. In the future we might want to lerp this to animate\n        // between lengths if the layout changes as we change the DOM\n        var axisLength = axisLayout.max - axisLayout.min;\n        // Get the initial progress that the pointer sat on this axis on gesture start.\n        var axisProgress = this.cursorProgress[axis];\n        // Calculate a new min point based on the latest pointer position, constraints and elastic\n        var min = calcConstrainedMinPoint(point[axis], axisLength, axisProgress, (_a = this.constraints) === null || _a === void 0 ? void 0 : _a[axis], this.elastic[axis]);\n        // Update the axis viewport target with this new min and the length\n        this.visualElement.setProjectionTargetAxis(axis, min, min + axisLength);\n    };\n    VisualElementDragControls.prototype.setProps = function (_a) {\n        var _b = _a.drag, drag = _b === void 0 ? false : _b, _c = _a.dragDirectionLock, dragDirectionLock = _c === void 0 ? false : _c, _d = _a.dragPropagation, dragPropagation = _d === void 0 ? false : _d, _e = _a.dragConstraints, dragConstraints = _e === void 0 ? false : _e, _f = _a.dragElastic, dragElastic = _f === void 0 ? defaultElastic : _f, _g = _a.dragMomentum, dragMomentum = _g === void 0 ? true : _g, remainingProps = __rest(_a, [\"drag\", \"dragDirectionLock\", \"dragPropagation\", \"dragConstraints\", \"dragElastic\", \"dragMomentum\"]);\n        this.props = __assign({ drag: drag,\n            dragDirectionLock: dragDirectionLock,\n            dragPropagation: dragPropagation,\n            dragConstraints: dragConstraints,\n            dragElastic: dragElastic,\n            dragMomentum: dragMomentum }, remainingProps);\n    };\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - If the component will perform layout animations, we output the gesture to the component's\n     *      visual bounding box\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    VisualElementDragControls.prototype.getAxisMotionValue = function (axis) {\n        var _a = this.props, layout = _a.layout, layoutId = _a.layoutId;\n        var dragKey = \"_drag\" + axis.toUpperCase();\n        if (this.props[dragKey]) {\n            return this.props[dragKey];\n        }\n        else if (!layout && layoutId === undefined) {\n            return this.visualElement.getValue(axis, 0);\n        }\n    };\n    VisualElementDragControls.prototype.isLayoutDrag = function () {\n        return !this.getAxisMotionValue(\"x\");\n    };\n    VisualElementDragControls.prototype.isExternalDrag = function () {\n        var _a = this.props, _dragX = _a._dragX, _dragY = _a._dragY;\n        return _dragX || _dragY;\n    };\n    VisualElementDragControls.prototype.animateDragEnd = function (velocity) {\n        var _this = this;\n        var _a = this.props, drag = _a.drag, dragMomentum = _a.dragMomentum, dragElastic = _a.dragElastic, dragTransition = _a.dragTransition;\n        /**\n         * Everything beyond the drag gesture should be performed with\n         * relative projection so children stay in sync with their parent element.\n         */\n        var isRelative = convertToRelativeProjection(this.visualElement, this.isLayoutDrag() && !this.isExternalDrag());\n        /**\n         * If we had previously resolved constraints relative to the viewport,\n         * we need to also convert those to a relative coordinate space for the animation\n         */\n        var constraints = this.constraints || {};\n        if (isRelative &&\n            Object.keys(constraints).length &&\n            this.isLayoutDrag()) {\n            var projectionParent = this.visualElement.getProjectionParent();\n            if (projectionParent) {\n                var relativeConstraints_1 = calcRelativeOffset(projectionParent.projection.targetFinal, constraints);\n                eachAxis(function (axis) {\n                    var _a = relativeConstraints_1[axis], min = _a.min, max = _a.max;\n                    constraints[axis] = {\n                        min: isNaN(min) ? undefined : min,\n                        max: isNaN(max) ? undefined : max,\n                    };\n                });\n            }\n        }\n        var momentumAnimations = eachAxis(function (axis) {\n            var _a;\n            if (!shouldDrag(axis, drag, _this.currentDirection)) {\n                return;\n            }\n            var transition = (_a = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a !== void 0 ? _a : {};\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            var bounceStiffness = dragElastic ? 200 : 1000000;\n            var bounceDamping = dragElastic ? 40 : 10000000;\n            var inertia = __assign(__assign({ type: \"inertia\", velocity: dragMomentum ? velocity[axis] : 0, bounceStiffness: bounceStiffness,\n                bounceDamping: bounceDamping, timeConstant: 750, restDelta: 1, restSpeed: 10 }, dragTransition), transition);\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return _this.getAxisMotionValue(axis)\n                ? _this.startAxisValueAnimation(axis, inertia)\n                : _this.visualElement.startLayoutAnimation(axis, inertia, isRelative);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(function () {\n            var _a, _b;\n            (_b = (_a = _this.props).onDragTransitionEnd) === null || _b === void 0 ? void 0 : _b.call(_a);\n        });\n    };\n    VisualElementDragControls.prototype.stopMotion = function () {\n        var _this = this;\n        eachAxis(function (axis) {\n            var axisValue = _this.getAxisMotionValue(axis);\n            axisValue\n                ? axisValue.stop()\n                : _this.visualElement.stopLayoutAnimation();\n        });\n    };\n    VisualElementDragControls.prototype.startAxisValueAnimation = function (axis, transition) {\n        var axisValue = this.getAxisMotionValue(axis);\n        if (!axisValue)\n            return;\n        var currentValue = axisValue.get();\n        axisValue.set(currentValue);\n        axisValue.set(currentValue); // Set twice to hard-reset velocity\n        return startAnimation(axis, axisValue, 0, transition);\n    };\n    VisualElementDragControls.prototype.scalePoint = function () {\n        var _this = this;\n        var _a = this.props, drag = _a.drag, dragConstraints = _a.dragConstraints;\n        if (!isRefObject(dragConstraints) || !this.constraintsBox)\n            return;\n        // Stop any current animations as there can be some visual glitching if we resize mid animation\n        this.stopMotion();\n        // Record the relative progress of the targetBox relative to the constraintsBox\n        var boxProgress = { x: 0, y: 0 };\n        eachAxis(function (axis) {\n            boxProgress[axis] = calcOrigin(_this.visualElement.projection.target[axis], _this.constraintsBox[axis]);\n        });\n        /**\n         * For each axis, calculate the current progress of the layout axis within the constraints.\n         * Then, using the latest layout and constraints measurements, reposition the new layout axis\n         * proportionally within the constraints.\n         */\n        this.updateConstraints(function () {\n            eachAxis(function (axis) {\n                if (!shouldDrag(axis, drag, null))\n                    return;\n                // Calculate the position of the targetBox relative to the constraintsBox using the\n                // previously calculated progress\n                var _a = calcPositionFromProgress(_this.visualElement.projection.target[axis], _this.constraintsBox[axis], boxProgress[axis]), min = _a.min, max = _a.max;\n                _this.visualElement.setProjectionTargetAxis(axis, min, max);\n            });\n        });\n        /**\n         * If any other draggable components are queuing the same tasks synchronously\n         * this will wait until they've all been scheduled before flushing.\n         */\n        setTimeout(flushLayout, 1);\n    };\n    VisualElementDragControls.prototype.updateConstraints = function (onReady) {\n        var _this = this;\n        this.cancelLayout = batchLayout(function (read, write) {\n            var ancestors = collectProjectingAncestors(_this.visualElement);\n            write(function () {\n                return ancestors.forEach(function (element) { return element.resetTransform(); });\n            });\n            read(function () { return updateLayoutMeasurement(_this.visualElement); });\n            write(function () {\n                return ancestors.forEach(function (element) { return element.restoreTransform(); });\n            });\n            read(function () {\n                _this.resolveDragConstraints();\n            });\n            if (onReady)\n                write(onReady);\n        });\n    };\n    VisualElementDragControls.prototype.mount = function (visualElement) {\n        var _this = this;\n        var element = visualElement.getInstance();\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        var stopPointerListener = addPointerEvent(element, \"pointerdown\", function (event) {\n            var _a = _this.props, drag = _a.drag, _b = _a.dragListener, dragListener = _b === void 0 ? true : _b;\n            drag && dragListener && _this.start(event);\n        });\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        var stopResizeListener = addDomEvent(window, \"resize\", function () {\n            _this.scalePoint();\n        });\n        /**\n         * Ensure drag constraints are resolved correctly relative to the dragging element\n         * whenever its layout changes.\n         */\n        var stopLayoutUpdateListener = visualElement.onLayoutUpdate(function () {\n            if (_this.isDragging) {\n                _this.resolveDragConstraints();\n            }\n        });\n        /**\n         * If the previous component with this same layoutId was dragging at the time\n         * it was unmounted, we want to continue the same gesture on this component.\n         */\n        var prevDragCursor = visualElement.prevDragCursor;\n        if (prevDragCursor) {\n            this.start(lastPointerEvent, { cursorProgress: prevDragCursor });\n        }\n        /**\n         * Return a function that will teardown the drag gesture\n         */\n        return function () {\n            stopPointerListener === null || stopPointerListener === void 0 ? void 0 : stopPointerListener();\n            stopResizeListener === null || stopResizeListener === void 0 ? void 0 : stopResizeListener();\n            stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();\n            _this.cancelDrag();\n        };\n    };\n    return VisualElementDragControls;\n}());\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold) {\n    if (lockThreshold === void 0) { lockThreshold = 10; }\n    var direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { calcRelativeOffset } from '../../../motion/features/layout/utils.js';\nimport { eachAxis } from '../../../utils/each-axis.js';\nimport { removeBoxTransforms } from '../../../utils/geometry/delta-apply.js';\n\n/**\n * Returns a boolean stating whether or not we converted the projection\n * to relative projection.\n */\nfunction convertToRelativeProjection(visualElement, isLayoutDrag) {\n    if (isLayoutDrag === void 0) { isLayoutDrag = true; }\n    var projectionParent = visualElement.getProjectionParent();\n    if (!projectionParent)\n        return false;\n    var offset;\n    if (isLayoutDrag) {\n        offset = calcRelativeOffset(projectionParent.projection.target, visualElement.projection.target);\n        removeBoxTransforms(offset, projectionParent.getLatestValues());\n    }\n    else {\n        offset = calcRelativeOffset(projectionParent.getLayoutState().layout, visualElement.getLayoutState().layout);\n    }\n    eachAxis(function (axis) {\n        return visualElement.setProjectionTargetAxis(axis, offset[axis].min, offset[axis].max, true);\n    });\n    return true;\n}\n\nexport { convertToRelativeProjection };\n","var makeRenderlessComponent = function (hook) { return function (props) {\n    hook(props);\n    return null;\n}; };\n\nexport { makeRenderlessComponent };\n","import { useDrag } from '../../gestures/drag/use-drag.js';\nimport { usePanGesture } from '../../gestures/use-pan-gesture.js';\nimport { makeRenderlessComponent } from '../utils/make-renderless-component.js';\n\nvar drag = {\n    pan: makeRenderlessComponent(usePanGesture),\n    drag: makeRenderlessComponent(useDrag),\n};\n\nexport { drag };\n","import { useRef, useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.js';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.js';\nimport { usePointerEvent } from '../events/use-pointer-event.js';\nimport { PanSession } from './PanSession.js';\n\n/**\n *\n * @param handlers -\n * @param ref -\n *\n * @internalremarks\n * Currently this sets new pan gesture functions every render. The memo route has been explored\n * in the past but ultimately we're still creating new functions every render. An optimisation\n * to explore is creating the pan gestures and loading them into a `ref`.\n *\n * @internal\n */\nfunction usePanGesture(_a) {\n    var onPan = _a.onPan, onPanStart = _a.onPanStart, onPanEnd = _a.onPanEnd, onPanSessionStart = _a.onPanSessionStart, visualElement = _a.visualElement;\n    var hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;\n    var panSession = useRef(null);\n    var transformPagePoint = useContext(MotionConfigContext).transformPagePoint;\n    var handlers = {\n        onSessionStart: onPanSessionStart,\n        onStart: onPanStart,\n        onMove: onPan,\n        onEnd: function (event, info) {\n            panSession.current = null;\n            onPanEnd && onPanEnd(event, info);\n        },\n    };\n    useEffect(function () {\n        if (panSession.current !== null) {\n            panSession.current.updateHandlers(handlers);\n        }\n    });\n    function onPointerDown(event) {\n        panSession.current = new PanSession(event, handlers, {\n            transformPagePoint: transformPagePoint,\n        });\n    }\n    usePointerEvent(visualElement, \"pointerdown\", hasPanEvents && onPointerDown);\n    useUnmountEffect(function () { return panSession.current && panSession.current.end(); });\n}\n\nexport { usePanGesture };\n","import { __assign } from 'tslib';\nimport { useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.js';\nimport { VisualElementDragControls } from './VisualElementDragControls.js';\nimport { useConstant } from '../../utils/use-constant.js';\n\n/**\n * A hook that allows an element to be dragged.\n *\n * @internal\n */\nfunction useDrag(props) {\n    var groupDragControls = props.dragControls, visualElement = props.visualElement;\n    var transformPagePoint = useContext(MotionConfigContext).transformPagePoint;\n    var dragControls = useConstant(function () {\n        return new VisualElementDragControls({\n            visualElement: visualElement,\n        });\n    });\n    dragControls.setProps(__assign(__assign({}, props), { transformPagePoint: transformPagePoint }));\n    // If we've been provided a DragControls for manual control over the drag gesture,\n    // subscribe this component to it on mount.\n    useEffect(function () { return groupDragControls && groupDragControls.subscribe(dragControls); }, [dragControls]);\n    // Mount the drag controls with the visualElement\n    useEffect(function () { return dragControls.mount(visualElement); }, []);\n}\n\nexport { useDrag };\n","import { __rest, __assign, __read } from 'tslib';\nimport { invariant } from 'hey-listen';\n\nfunction isCSSVariable(value) {\n    return typeof value === \"string\" && value.startsWith(\"var(--\");\n}\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nvar cssVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    var match = cssVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    var _a = __read(match, 3), token = _a[1], fallback = _a[2];\n    return [token, fallback];\n}\nvar maxDepth = 4;\nfunction getVariableValue(current, element, depth) {\n    if (depth === void 0) { depth = 1; }\n    invariant(depth <= maxDepth, \"Max CSS variable fallback depth detected in property \\\"\" + current + \"\\\". This may indicate a circular fallback dependency.\");\n    var _a = __read(parseCSSVariable(current), 2), token = _a[0], fallback = _a[1];\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    var resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        return resolved.trim();\n    }\n    else if (isCSSVariable(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    }\n    else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, _a, transitionEnd) {\n    var _b;\n    var target = __rest(_a, []);\n    var element = visualElement.getInstance();\n    if (!(element instanceof HTMLElement))\n        return { target: target, transitionEnd: transitionEnd };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = __assign({}, transitionEnd);\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.forEachValue(function (value) {\n        var current = value.get();\n        if (!isCSSVariable(current))\n            return;\n        var resolved = getVariableValue(current, element);\n        if (resolved)\n            value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for (var key in target) {\n        var current = target[key];\n        if (!isCSSVariable(current))\n            continue;\n        var resolved = getVariableValue(current, element);\n        if (!resolved)\n            continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd)\n            (_b = transitionEnd[key]) !== null && _b !== void 0 ? _b : (transitionEnd[key] = current);\n    }\n    return { target: target, transitionEnd: transitionEnd };\n}\n\nexport { cssVariableRegex, parseCSSVariable, resolveCSSVariables };\n","import { __assign } from 'tslib';\nimport { complex, px } from 'style-value-types';\nimport { mix } from 'popmotion';\nimport { cssVariableRegex } from '../utils/css-variables-conversion.js';\n\nfunction pixelsToPercent(pixels, axis) {\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nfunction correctBorderRadius(latest, _layoutState, _a) {\n    var target = _a.target;\n    /**\n     * If latest is a string, if it's a percentage we can return immediately as it's\n     * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n     */\n    if (typeof latest === \"string\") {\n        if (px.test(latest)) {\n            latest = parseFloat(latest);\n        }\n        else {\n            return latest;\n        }\n    }\n    /**\n     * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n     * pixel value as a percentage of each axis\n     */\n    var x = pixelsToPercent(latest, target.x);\n    var y = pixelsToPercent(latest, target.y);\n    return x + \"% \" + y + \"%\";\n}\nvar varToken = \"_$css\";\nfunction correctBoxShadow(latest, _a) {\n    var delta = _a.delta, treeScale = _a.treeScale;\n    var original = latest;\n    /**\n     * We need to first strip and store CSS variables from the string.\n     */\n    var containsCSSVariables = latest.includes(\"var(\");\n    var cssVariables = [];\n    if (containsCSSVariables) {\n        latest = latest.replace(cssVariableRegex, function (match) {\n            cssVariables.push(match);\n            return varToken;\n        });\n    }\n    var shadow = complex.parse(latest);\n    // TODO: Doesn't support multiple shadows\n    if (shadow.length > 5)\n        return original;\n    var template = complex.createTransformer(latest);\n    var offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n    // Calculate the overall context scale\n    var xScale = delta.x.scale * treeScale.x;\n    var yScale = delta.y.scale * treeScale.y;\n    shadow[0 + offset] /= xScale;\n    shadow[1 + offset] /= yScale;\n    /**\n     * Ideally we'd correct x and y scales individually, but because blur and\n     * spread apply to both we have to take a scale average and apply that instead.\n     * We could potentially improve the outcome of this by incorporating the ratio between\n     * the two scales.\n     */\n    var averageScale = mix(xScale, yScale, 0.5);\n    // Blur\n    if (typeof shadow[2 + offset] === \"number\")\n        shadow[2 + offset] /= averageScale;\n    // Spread\n    if (typeof shadow[3 + offset] === \"number\")\n        shadow[3 + offset] /= averageScale;\n    var output = template(shadow);\n    if (containsCSSVariables) {\n        var i_1 = 0;\n        output = output.replace(varToken, function () {\n            var cssVariable = cssVariables[i_1];\n            i_1++;\n            return cssVariable;\n        });\n    }\n    return output;\n}\nvar borderCorrectionDefinition = {\n    process: correctBorderRadius,\n};\nvar defaultScaleCorrectors = {\n    borderRadius: __assign(__assign({}, borderCorrectionDefinition), { applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ] }),\n    borderTopLeftRadius: borderCorrectionDefinition,\n    borderTopRightRadius: borderCorrectionDefinition,\n    borderBottomLeftRadius: borderCorrectionDefinition,\n    borderBottomRightRadius: borderCorrectionDefinition,\n    boxShadow: {\n        process: correctBoxShadow,\n    },\n};\n\nexport { correctBorderRadius, correctBoxShadow, defaultScaleCorrectors, pixelsToPercent };\n","import { __extends, __rest, __assign, __read } from 'tslib';\nimport * as React from 'react';\nimport { eachAxis } from '../../../utils/each-axis.js';\nimport { startAnimation, getValueTransition } from '../../../animation/utils/transitions.js';\nimport { checkIfParentHasChanged, calcRelativeOffset, tweenAxis } from './utils.js';\nimport { VisibilityAction } from '../../../components/AnimateSharedLayout/types.js';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.js';\nimport { axisBox } from '../../../utils/geometry/index.js';\nimport { addScaleCorrection } from '../../../render/dom/projection/scale-correction.js';\nimport { defaultScaleCorrectors } from '../../../render/dom/projection/default-scale-correctors.js';\n\nvar progressTarget = 1000;\nvar Animate = /** @class */ (function (_super) {\n    __extends(Animate, _super);\n    function Animate() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * A mutable object that tracks the target viewport box\n         * for the current animation frame.\n         */\n        _this.frameTarget = axisBox();\n        /**\n         * The current animation target, we use this to check whether to start\n         * a new animation or continue the existing one.\n         */\n        _this.currentAnimationTarget = axisBox();\n        /**\n         * Track whether we're animating this axis.\n         */\n        _this.isAnimating = {\n            x: false,\n            y: false,\n        };\n        _this.stopAxisAnimation = {\n            x: undefined,\n            y: undefined,\n        };\n        _this.isAnimatingTree = false;\n        _this.animate = function (target, origin, _a) {\n            if (_a === void 0) { _a = {}; }\n            var originBox = _a.originBox, targetBox = _a.targetBox, visibilityAction = _a.visibilityAction, shouldStackAnimate = _a.shouldStackAnimate, onComplete = _a.onComplete, prevParent = _a.prevParent, config = __rest(_a, [\"originBox\", \"targetBox\", \"visibilityAction\", \"shouldStackAnimate\", \"onComplete\", \"prevParent\"]);\n            var _b = _this.props, visualElement = _b.visualElement, layout = _b.layout;\n            /**\n             * Early return if we've been instructed not to animate this render.\n             */\n            if (shouldStackAnimate === false) {\n                _this.isAnimatingTree = false;\n                return _this.safeToRemove();\n            }\n            /**\n             * Prioritise tree animations\n             */\n            if (_this.isAnimatingTree && shouldStackAnimate !== true) {\n                return;\n            }\n            else if (shouldStackAnimate) {\n                _this.isAnimatingTree = true;\n            }\n            /**\n             * Allow the measured origin (prev bounding box) and target (actual layout) to be\n             * overridden by the provided config.\n             */\n            origin = originBox || origin;\n            target = targetBox || target;\n            /**\n             * If this element has a projecting parent, there's an opportunity to animate\n             * it relatively to that parent rather than relatively to the viewport. This\n             * allows us to add orchestrated animations.\n             */\n            var isRelative = false;\n            var projectionParent = visualElement.getProjectionParent();\n            if (projectionParent) {\n                var prevParentViewportBox = projectionParent.prevViewportBox;\n                var parentLayout = projectionParent.getLayoutState().layout;\n                /**\n                 * If we're being provided a previous parent VisualElement by AnimateSharedLayout\n                 */\n                if (prevParent) {\n                    /**\n                     * If we've been provided an explicit target box it means we're animating back\n                     * to this previous parent. So we can make a relative box by comparing to the previous\n                     * parent's layout\n                     */\n                    if (targetBox) {\n                        parentLayout = prevParent.getLayoutState().layout;\n                    }\n                    /**\n                     * Likewise if we've been provided an explicit origin box it means we're\n                     * animating out from a different element. So we should figure out where that was\n                     * on screen relative to the new parent element.\n                     */\n                    if (originBox &&\n                        !checkIfParentHasChanged(prevParent, projectionParent) &&\n                        prevParent.prevViewportBox) {\n                        prevParentViewportBox = prevParent.prevViewportBox;\n                    }\n                }\n                if (prevParentViewportBox &&\n                    isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox)) {\n                    isRelative = true;\n                    origin = calcRelativeOffset(prevParentViewportBox, origin);\n                    target = calcRelativeOffset(parentLayout, target);\n                }\n            }\n            var boxHasMoved = hasMoved(origin, target);\n            var animations = eachAxis(function (axis) {\n                var _a, _b;\n                /**\n                 * If layout is set to \"position\", we can resize the origin box based on the target\n                 * box and only animate its position.\n                 */\n                if (layout === \"position\") {\n                    var targetLength = target[axis].max - target[axis].min;\n                    origin[axis].max = origin[axis].min + targetLength;\n                }\n                if (visualElement.projection.isTargetLocked) {\n                    return;\n                }\n                else if (visibilityAction !== undefined) {\n                    visualElement.setVisibility(visibilityAction === VisibilityAction.Show);\n                }\n                else if (boxHasMoved) {\n                    // If the box has moved, animate between it's current visual state and its\n                    // final state\n                    return _this.animateAxis(axis, target[axis], origin[axis], __assign(__assign({}, config), { isRelative: isRelative }));\n                }\n                else {\n                    (_b = (_a = _this.stopAxisAnimation)[axis]) === null || _b === void 0 ? void 0 : _b.call(_a);\n                    // If the box has remained in the same place, immediately set the axis target\n                    // to the final desired state\n                    return visualElement.setProjectionTargetAxis(axis, target[axis].min, target[axis].max, isRelative);\n                }\n            });\n            // Force a render to ensure there's no flash of uncorrected bounding box.\n            visualElement.syncRender();\n            /**\n             * If this visualElement isn't present (ie it's been removed from the tree by the user but\n             * kept in by the tree by AnimatePresence) then call safeToRemove when all axis animations\n             * have successfully finished.\n             */\n            return Promise.all(animations).then(function () {\n                _this.isAnimatingTree = false;\n                onComplete && onComplete();\n                visualElement.notifyLayoutAnimationComplete();\n            });\n        };\n        return _this;\n    }\n    Animate.prototype.componentDidMount = function () {\n        var _this = this;\n        var visualElement = this.props.visualElement;\n        visualElement.animateMotionValue = startAnimation;\n        visualElement.enableLayoutProjection();\n        this.unsubLayoutReady = visualElement.onLayoutUpdate(this.animate);\n        visualElement.layoutSafeToRemove = function () { return _this.safeToRemove(); };\n        addScaleCorrection(defaultScaleCorrectors);\n    };\n    Animate.prototype.componentWillUnmount = function () {\n        var _this = this;\n        this.unsubLayoutReady();\n        eachAxis(function (axis) { var _a, _b; return (_b = (_a = _this.stopAxisAnimation)[axis]) === null || _b === void 0 ? void 0 : _b.call(_a); });\n    };\n    /**\n     * TODO: This manually performs animations on the visualElement's layout progress\n     * values. It'd be preferable to amend the startLayoutAxisAnimation\n     * API to accept more custom animations like this.\n     */\n    Animate.prototype.animateAxis = function (axis, target, origin, _a) {\n        var _this = this;\n        var _b, _c;\n        var _d = _a === void 0 ? {} : _a, transition = _d.transition, isRelative = _d.isRelative;\n        /**\n         * If we're not animating to a new target, don't run this animation\n         */\n        if (this.isAnimating[axis] &&\n            axisIsEqual(target, this.currentAnimationTarget[axis])) {\n            return;\n        }\n        (_c = (_b = this.stopAxisAnimation)[axis]) === null || _c === void 0 ? void 0 : _c.call(_b);\n        this.isAnimating[axis] = true;\n        var visualElement = this.props.visualElement;\n        var frameTarget = this.frameTarget[axis];\n        var layoutProgress = visualElement.getProjectionAnimationProgress()[axis];\n        /**\n         * Set layout progress back to 0. We set it twice to hard-reset any velocity that might\n         * be re-incoporated into a subsequent spring animation.\n         */\n        layoutProgress.clearListeners();\n        layoutProgress.set(0);\n        layoutProgress.set(0);\n        /**\n         * Create an animation function to run once per frame. This will tween the visual bounding box from\n         * origin to target using the latest progress value.\n         */\n        var frame = function () {\n            // Convert the latest layoutProgress, which is a value from 0-1000, into a 0-1 progress\n            var p = layoutProgress.get() / progressTarget;\n            // Tween the axis and update the visualElement with the latest values\n            tweenAxis(frameTarget, origin, target, p);\n            visualElement.setProjectionTargetAxis(axis, frameTarget.min, frameTarget.max, isRelative);\n        };\n        // Synchronously run a frame to ensure there's no flash of the uncorrected bounding box.\n        frame();\n        // Create a function to stop animation on this specific axis\n        var unsubscribeProgress = layoutProgress.onChange(frame);\n        this.stopAxisAnimation[axis] = function () {\n            _this.isAnimating[axis] = false;\n            layoutProgress.stop();\n            unsubscribeProgress();\n        };\n        this.currentAnimationTarget[axis] = target;\n        var layoutTransition = transition ||\n            visualElement.getDefaultTransition() ||\n            defaultLayoutTransition;\n        // Start the animation on this axis\n        var animation = startAnimation(axis === \"x\" ? \"layoutX\" : \"layoutY\", layoutProgress, progressTarget, layoutTransition && getValueTransition(layoutTransition, \"layout\")).then(this.stopAxisAnimation[axis]);\n        return animation;\n    };\n    Animate.prototype.safeToRemove = function () {\n        var _a, _b;\n        (_b = (_a = this.props).safeToRemove) === null || _b === void 0 ? void 0 : _b.call(_a);\n    };\n    Animate.prototype.render = function () {\n        return null;\n    };\n    return Animate;\n}(React.Component));\nfunction AnimateLayoutContextProvider(props) {\n    var _a = __read(usePresence(), 2), safeToRemove = _a[1];\n    return React.createElement(Animate, __assign({}, props, { safeToRemove: safeToRemove }));\n}\nfunction hasMoved(a, b) {\n    return (!isZeroBox(a) &&\n        !isZeroBox(b) &&\n        (!axisIsEqual(a.x, b.x) || !axisIsEqual(a.y, b.y)));\n}\nvar zeroAxis = { min: 0, max: 0 };\nfunction isZeroBox(a) {\n    return axisIsEqual(a.x, zeroAxis) && axisIsEqual(a.y, zeroAxis);\n}\nfunction axisIsEqual(a, b) {\n    return a.min === b.min && a.max === b.max;\n}\nvar defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox) {\n    return prevParent || (!prevParent && !(originBox || targetBox));\n}\n\nexport { AnimateLayoutContextProvider };\n","import { __extends, __assign } from 'tslib';\nimport React__default, { useContext } from 'react';\nimport { isSharedLayout, SharedLayoutContext, FramerTreeLayoutContext } from '../../../context/SharedLayoutContext.js';\nimport { snapshotViewportBox } from '../../../render/dom/projection/utils.js';\n\n/**\n * This component is responsible for scheduling the measuring of the motion component\n */\nvar Measure = /** @class */ (function (_super) {\n    __extends(Measure, _super);\n    function Measure() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * If this is a child of a SyncContext, register the VisualElement with it on mount.\n     */\n    Measure.prototype.componentDidMount = function () {\n        var _a = this.props, syncLayout = _a.syncLayout, framerSyncLayout = _a.framerSyncLayout, visualElement = _a.visualElement;\n        isSharedLayout(syncLayout) && syncLayout.register(visualElement);\n        isSharedLayout(framerSyncLayout) &&\n            framerSyncLayout.register(visualElement);\n        visualElement.onUnmount(function () {\n            if (isSharedLayout(syncLayout)) {\n                syncLayout.remove(visualElement);\n            }\n            if (isSharedLayout(framerSyncLayout)) {\n                framerSyncLayout.remove(visualElement);\n            }\n        });\n    };\n    /**\n     * If this is a child of a SyncContext, notify it that it needs to re-render. It will then\n     * handle the snapshotting.\n     *\n     * If it is stand-alone component, add it to the batcher.\n     */\n    Measure.prototype.getSnapshotBeforeUpdate = function () {\n        var _a = this.props, syncLayout = _a.syncLayout, visualElement = _a.visualElement;\n        if (isSharedLayout(syncLayout)) {\n            syncLayout.syncUpdate();\n        }\n        else {\n            snapshotViewportBox(visualElement);\n            syncLayout.add(visualElement);\n        }\n        return null;\n    };\n    Measure.prototype.componentDidUpdate = function () {\n        var syncLayout = this.props.syncLayout;\n        if (!isSharedLayout(syncLayout))\n            syncLayout.flush();\n    };\n    Measure.prototype.render = function () {\n        return null;\n    };\n    return Measure;\n}(React__default.Component));\nfunction MeasureContextProvider(props) {\n    var syncLayout = useContext(SharedLayoutContext);\n    var framerSyncLayout = useContext(FramerTreeLayoutContext);\n    return (React__default.createElement(Measure, __assign({}, props, { syncLayout: syncLayout, framerSyncLayout: framerSyncLayout })));\n}\n\nexport { MeasureContextProvider };\n","import { AnimateLayoutContextProvider } from './Animate.js';\nimport { MeasureContextProvider } from './Measure.js';\n\nvar layoutAnimations = {\n    measureLayout: MeasureContextProvider,\n    layoutAnimation: AnimateLayoutContextProvider,\n};\n\nexport { layoutAnimations };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    var prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (var i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","import { __spreadArray, __read, __assign, __rest } from 'tslib';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.js';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.js';\nimport { shallowCompare } from '../../utils/shallow-compare.js';\nimport { animateVisualElement } from './animation.js';\nimport { AnimationType } from './types.js';\nimport { isVariantLabels, resolveVariant, isVariantLabel } from './variants.js';\n\nvar variantPriorityOrder = [\n    AnimationType.Animate,\n    AnimationType.Hover,\n    AnimationType.Tap,\n    AnimationType.Drag,\n    AnimationType.Focus,\n    AnimationType.Exit,\n];\nvar reversePriorityOrder = __spreadArray([], __read(variantPriorityOrder)).reverse();\nvar numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return function (animations) {\n        return Promise.all(animations.map(function (_a) {\n            var animation = _a.animation, options = _a.options;\n            return animateVisualElement(visualElement, animation, options);\n        }));\n    };\n}\nfunction createAnimationState(visualElement) {\n    var animate = animateList(visualElement);\n    var state = createState();\n    var allAnimatedKeys = {};\n    var isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    var buildResolvedTypeValues = function (acc, definition) {\n        var resolved = resolveVariant(visualElement, definition);\n        if (resolved) {\n            resolved.transition; var transitionEnd = resolved.transitionEnd, target = __rest(resolved, [\"transition\", \"transitionEnd\"]);\n            acc = __assign(__assign(__assign({}, acc), target), transitionEnd);\n        }\n        return acc;\n    };\n    function isAnimated(key) {\n        return allAnimatedKeys[key] !== undefined;\n    }\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(options, changedActiveType) {\n        var _a;\n        var props = visualElement.getProps();\n        var context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        var animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        var removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        var encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        var removedVariantIndex = Infinity;\n        var _loop_1 = function (i) {\n            var type = reversePriorityOrder[i];\n            var typeState = state[type];\n            var prop = (_a = props[type]) !== null && _a !== void 0 ? _a : context[type];\n            var propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            var activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            var isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = __assign({}, encounteredKeys);\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                return \"continue\";\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            var shouldAnimateType = variantsHaveChanged(typeState.prevProp, prop) ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            var definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            var _b = typeState.prevResolvedValues, prevResolvedValues = _b === void 0 ? {} : _b;\n            var allKeys = __assign(__assign({}, prevResolvedValues), resolvedValues);\n            var markToAnimate = function (key) {\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for (var key in allKeys) {\n                var next = resolvedValues[key];\n                var prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */\n                    if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                        if (!shallowCompare(next, prev)) {\n                            markToAnimate(key);\n                        }\n                        else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */\n                            typeState.protectedKeys[key] = true;\n                        }\n                    }\n                    else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = __assign(__assign({}, encounteredKeys), resolvedValues);\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */\n            if (shouldAnimateType && !isInherited) {\n                animations.push.apply(animations, __spreadArray([], __read(definitionList.map(function (animation) { return ({\n                    animation: animation,\n                    options: __assign({ type: type }, options),\n                }); }))));\n            }\n        };\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (var i = 0; i < numAnimationTypes; i++) {\n            _loop_1(i);\n        }\n        allAnimatedKeys = __assign({}, encounteredKeys);\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            var fallbackAnimation_1 = {};\n            removedKeys.forEach(function (key) {\n                var fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation_1[key] = fallbackTarget;\n                }\n            });\n            animations.push({ animation: fallbackAnimation_1 });\n        }\n        var shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            props.initial === false &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function (child) { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        return animateChanges(options, type);\n    }\n    return {\n        isAnimated: isAnimated,\n        animateChanges: animateChanges,\n        setActive: setActive,\n        setAnimateFunction: setAnimateFunction,\n        getState: function () { return state; },\n    };\n}\nfunction variantsHaveChanged(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (isVariantLabels(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive) {\n    if (isActive === void 0) { isActive = false; }\n    return {\n        isActive: isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    var _a;\n    return _a = {},\n        _a[AnimationType.Animate] = createTypeState(true),\n        _a[AnimationType.Hover] = createTypeState(),\n        _a[AnimationType.Tap] = createTypeState(),\n        _a[AnimationType.Drag] = createTypeState(),\n        _a[AnimationType.Focus] = createTypeState(),\n        _a[AnimationType.Exit] = createTypeState(),\n        _a;\n}\n\nexport { createAnimationState, variantPriorityOrder, variantsHaveChanged };\n","import { __read } from 'tslib';\nimport { useEffect, useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.js';\nimport { usePresence } from '../../components/AnimatePresence/use-presence.js';\nimport { PresenceContext } from '../../context/PresenceContext.js';\nimport { createAnimationState } from '../../render/utils/animation-state.js';\nimport { AnimationType } from '../../render/utils/types.js';\nimport { makeRenderlessComponent } from '../utils/make-renderless-component.js';\n\nvar animations = {\n    animation: makeRenderlessComponent(function (_a) {\n        var visualElement = _a.visualElement, animate = _a.animate;\n        /**\n         * We dynamically generate the AnimationState manager as it contains a reference\n         * to the underlying animation library. We only want to load that if we load this,\n         * so people can optionally code split it out using the `m` component.\n         */\n        visualElement.animationState || (visualElement.animationState = createAnimationState(visualElement));\n        /**\n         * Subscribe any provided AnimationControls to the component's VisualElement\n         */\n        if (isAnimationControls(animate)) {\n            useEffect(function () { return animate.subscribe(visualElement); }, [animate]);\n        }\n    }),\n    exit: makeRenderlessComponent(function (props) {\n        var custom = props.custom, visualElement = props.visualElement;\n        var _a = __read(usePresence(), 2), isPresent = _a[0], onExitComplete = _a[1];\n        var presenceContext = useContext(PresenceContext);\n        useEffect(function () {\n            var _a, _b;\n            var animation = (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Exit, !isPresent, { custom: (_b = presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.custom) !== null && _b !== void 0 ? _b : custom });\n            !isPresent && (animation === null || animation === void 0 ? void 0 : animation.then(onExitComplete));\n        }, [isPresent]);\n    }),\n};\n\nexport { animations };\n","import { isMouseEvent } from './utils/event-type.js';\nimport { AnimationType } from '../render/utils/types.js';\nimport { usePointerEvent } from '../events/use-pointer-event.js';\nimport { isDragActive } from './drag/utils/lock.js';\n\nfunction createHoverEvent(visualElement, isActive, callback) {\n    return function (event, info) {\n        var _a;\n        if (!isMouseEvent(event) || isDragActive())\n            return;\n        callback === null || callback === void 0 ? void 0 : callback(event, info);\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Hover, isActive);\n    };\n}\nfunction useHoverGesture(_a) {\n    var onHoverStart = _a.onHoverStart, onHoverEnd = _a.onHoverEnd, whileHover = _a.whileHover, visualElement = _a.visualElement;\n    usePointerEvent(visualElement, \"pointerenter\", onHoverStart || whileHover\n        ? createHoverEvent(visualElement, true, onHoverStart)\n        : undefined);\n    usePointerEvent(visualElement, \"pointerleave\", onHoverEnd || whileHover\n        ? createHoverEvent(visualElement, false, onHoverEnd)\n        : undefined);\n}\n\nexport { useHoverGesture };\n","/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nvar isNodeOrChild = function (parent, child) {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nexport { isNodeOrChild };\n","import { useFocusGesture } from '../../gestures/use-focus-gesture.js';\nimport { useHoverGesture } from '../../gestures/use-hover-gesture.js';\nimport { useTapGesture } from '../../gestures/use-tap-gesture.js';\nimport { makeRenderlessComponent } from '../utils/make-renderless-component.js';\n\nvar gestureAnimations = {\n    tap: makeRenderlessComponent(useTapGesture),\n    focus: makeRenderlessComponent(useFocusGesture),\n    hover: makeRenderlessComponent(useHoverGesture),\n};\n\nexport { gestureAnimations };\n","import { useRef } from 'react';\nimport { isNodeOrChild } from './utils/is-node-or-child.js';\nimport { usePointerEvent, addPointerEvent } from '../events/use-pointer-event.js';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.js';\nimport { pipe } from 'popmotion';\nimport { AnimationType } from '../render/utils/types.js';\nimport { isDragActive } from './drag/utils/lock.js';\n\n/**\n * @param handlers -\n * @internal\n */\nfunction useTapGesture(_a) {\n    var onTap = _a.onTap, onTapStart = _a.onTapStart, onTapCancel = _a.onTapCancel, whileTap = _a.whileTap, visualElement = _a.visualElement;\n    var hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;\n    var isPressing = useRef(false);\n    var cancelPointerEndListeners = useRef(null);\n    function removePointerEndListener() {\n        var _a;\n        (_a = cancelPointerEndListeners.current) === null || _a === void 0 ? void 0 : _a.call(cancelPointerEndListeners);\n        cancelPointerEndListeners.current = null;\n    }\n    function checkPointerEnd() {\n        var _a;\n        removePointerEndListener();\n        isPressing.current = false;\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Tap, false);\n        return !isDragActive();\n    }\n    function onPointerUp(event, info) {\n        if (!checkPointerEnd())\n            return;\n        /**\n         * We only count this as a tap gesture if the event.target is the same\n         * as, or a child of, this component's element\n         */\n        !isNodeOrChild(visualElement.getInstance(), event.target)\n            ? onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info)\n            : onTap === null || onTap === void 0 ? void 0 : onTap(event, info);\n    }\n    function onPointerCancel(event, info) {\n        if (!checkPointerEnd())\n            return;\n        onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info);\n    }\n    function onPointerDown(event, info) {\n        var _a;\n        removePointerEndListener();\n        if (isPressing.current)\n            return;\n        isPressing.current = true;\n        cancelPointerEndListeners.current = pipe(addPointerEvent(window, \"pointerup\", onPointerUp), addPointerEvent(window, \"pointercancel\", onPointerCancel));\n        onTapStart === null || onTapStart === void 0 ? void 0 : onTapStart(event, info);\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Tap, true);\n    }\n    usePointerEvent(visualElement, \"pointerdown\", hasPressListeners ? onPointerDown : undefined);\n    useUnmountEffect(removePointerEndListener);\n}\n\nexport { useTapGesture };\n","import { AnimationType } from '../render/utils/types.js';\nimport { useDomEvent } from '../events/use-dom-event.js';\n\n/**\n *\n * @param props\n * @param ref\n * @internal\n */\nfunction useFocusGesture(_a) {\n    var whileFocus = _a.whileFocus, visualElement = _a.visualElement;\n    var onFocus = function () {\n        var _a;\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Focus, true);\n    };\n    var onBlur = function () {\n        var _a;\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Focus, false);\n    };\n    useDomEvent(visualElement, \"focus\", whileFocus ? onFocus : undefined);\n    useDomEvent(visualElement, \"blur\", whileFocus ? onBlur : undefined);\n}\n\nexport { useFocusGesture };\n","import { axisBox, delta } from '../../utils/geometry/index.js';\n\nvar createProjectionState = function () { return ({\n    isEnabled: false,\n    isHydrated: false,\n    isTargetLocked: false,\n    target: axisBox(),\n    targetFinal: axisBox(),\n}); };\nfunction createLayoutState() {\n    return {\n        isHydrated: false,\n        layout: axisBox(),\n        layoutCorrected: axisBox(),\n        treeScale: { x: 1, y: 1 },\n        delta: delta(),\n        deltaFinal: delta(),\n        deltaTransform: \"\",\n    };\n}\nvar zeroLayout = createLayoutState();\n\nexport { createLayoutState, createProjectionState, zeroLayout };\n","import { zeroLayout } from '../../utils/state.js';\n\n/**\n * Build a transform style that takes a calculated delta between the element's current\n * space on screen and projects it into the desired space.\n */\nfunction buildLayoutProjectionTransform(_a, treeScale, latestTransform) {\n    var x = _a.x, y = _a.y;\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    var xTranslate = x.translate / treeScale.x;\n    var yTranslate = y.translate / treeScale.y;\n    var transform = \"translate3d(\" + xTranslate + \"px, \" + yTranslate + \"px, 0) \";\n    if (latestTransform) {\n        var rotate = latestTransform.rotate, rotateX = latestTransform.rotateX, rotateY = latestTransform.rotateY;\n        if (rotate)\n            transform += \"rotate(\" + rotate + \") \";\n        if (rotateX)\n            transform += \"rotateX(\" + rotateX + \") \";\n        if (rotateY)\n            transform += \"rotateY(\" + rotateY + \") \";\n    }\n    transform += \"scale(\" + x.scale + \", \" + y.scale + \")\";\n    return !latestTransform && transform === identityProjection ? \"\" : transform;\n}\n/**\n * Take the calculated delta origin and apply it as a transform string.\n */\nfunction buildLayoutProjectionTransformOrigin(_a) {\n    var deltaFinal = _a.deltaFinal;\n    return deltaFinal.x.origin * 100 + \"% \" + deltaFinal.y.origin * 100 + \"% 0\";\n}\nvar identityProjection = buildLayoutProjectionTransform(zeroLayout.delta, zeroLayout.treeScale, { x: 1, y: 1 });\n\nexport { buildLayoutProjectionTransform, buildLayoutProjectionTransformOrigin, identityProjection };\n","import { __spreadArray, __read } from 'tslib';\nimport { SubscriptionManager } from '../../utils/subscription-manager.js';\n\nvar names = [\n    \"LayoutMeasure\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutUpdate\",\n    \"ViewportBoxUpdate\",\n    \"Update\",\n    \"Render\",\n    \"AnimationComplete\",\n    \"LayoutAnimationComplete\",\n    \"AnimationStart\",\n    \"SetAxisTarget\",\n    \"Unmount\",\n];\nfunction createLifecycles() {\n    var managers = names.map(function () { return new SubscriptionManager(); });\n    var propSubscriptions = {};\n    var lifecycles = {\n        clearAllListeners: function () { return managers.forEach(function (manager) { return manager.clear(); }); },\n        updatePropListeners: function (props) {\n            return names.forEach(function (name) {\n                var _a;\n                (_a = propSubscriptions[name]) === null || _a === void 0 ? void 0 : _a.call(propSubscriptions);\n                var on = \"on\" + name;\n                var propListener = props[on];\n                if (propListener) {\n                    propSubscriptions[name] = lifecycles[on](propListener);\n                }\n            });\n        },\n    };\n    managers.forEach(function (manager, i) {\n        lifecycles[\"on\" + names[i]] = function (handler) { return manager.add(handler); };\n        lifecycles[\"notify\" + names[i]] = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return manager.notify.apply(manager, __spreadArray([], __read(args)));\n        };\n    });\n    return lifecycles;\n}\n\nexport { createLifecycles };\n","import { resetBox, applyTreeDeltas } from '../../utils/geometry/delta-apply.js';\nimport { updateBoxDelta } from '../../utils/geometry/delta-calc.js';\n\nfunction updateLayoutDeltas(_a, _b, treePath, transformOrigin) {\n    var delta = _a.delta, layout = _a.layout, layoutCorrected = _a.layoutCorrected, treeScale = _a.treeScale;\n    var target = _b.target;\n    /**\n     * Reset the corrected box with the latest values from box, as we're then going\n     * to perform mutative operations on it.\n     */\n    resetBox(layoutCorrected, layout);\n    /**\n     * Apply all the parent deltas to this box to produce the corrected box. This\n     * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n     */\n    applyTreeDeltas(layoutCorrected, treeScale, treePath);\n    /**\n     * Update the delta between the corrected box and the target box before user-set transforms were applied.\n     * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n     * for our layout reprojection, but still allow them to be scaled correctly by the user.\n     * It might be that to simplify this we may want to accept that user-set scale is also corrected\n     * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n     * to allow people to choose whether these styles are corrected based on just the\n     * layout reprojection or the final bounding box.\n     */\n    updateBoxDelta(delta, layoutCorrected, target, transformOrigin);\n}\n\nexport { updateLayoutDeltas };\n","import { addUniqueItem, removeItem } from '../../utils/array.js';\nimport { compareByDepth } from './compare-by-depth.js';\n\nvar FlatTree = /** @class */ (function () {\n    function FlatTree() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    FlatTree.prototype.add = function (child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    };\n    FlatTree.prototype.remove = function (child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    };\n    FlatTree.prototype.forEach = function (callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    };\n    return FlatTree;\n}());\n\nexport { FlatTree };\n","import { __assign, __spreadArray, __read } from 'tslib';\nimport sync, { cancelSync } from 'framesync';\nimport { pipe } from 'popmotion';\nimport { Presence } from '../components/AnimateSharedLayout/types.js';\nimport { eachAxis } from '../utils/each-axis.js';\nimport { axisBox } from '../utils/geometry/index.js';\nimport { removeBoxTransforms, applyBoxTransforms } from '../utils/geometry/delta-apply.js';\nimport { calcRelativeBox, updateBoxDelta } from '../utils/geometry/delta-calc.js';\nimport { motionValue } from '../value/index.js';\nimport { isMotionValue } from '../value/utils/is-motion-value.js';\nimport { buildLayoutProjectionTransform } from './html/utils/build-projection-transform.js';\nimport { variantPriorityOrder } from './utils/animation-state.js';\nimport { createLifecycles } from './utils/lifecycles.js';\nimport { updateMotionValuesFromProps } from './utils/motion-values.js';\nimport { updateLayoutDeltas } from './utils/projection.js';\nimport { createLayoutState, createProjectionState } from './utils/state.js';\nimport { FlatTree } from './utils/flat-tree.js';\nimport { checkIfControllingVariants, checkIfVariantNode, isVariantLabel } from './utils/variants.js';\nimport { setCurrentViewportBox } from './dom/projection/relative-set.js';\nimport { isDraggable } from './utils/is-draggable.js';\n\nvar visualElement = function (_a) {\n    var _b = _a.treeType, treeType = _b === void 0 ? \"\" : _b, build = _a.build, getBaseTarget = _a.getBaseTarget, makeTargetAnimatable = _a.makeTargetAnimatable, measureViewportBox = _a.measureViewportBox, renderInstance = _a.render, readValueFromInstance = _a.readValueFromInstance, resetTransform = _a.resetTransform, restoreTransform = _a.restoreTransform, removeValueFromRenderState = _a.removeValueFromRenderState, sortNodePosition = _a.sortNodePosition, scrapeMotionValuesFromProps = _a.scrapeMotionValuesFromProps;\n    return function (_a, options) {\n        var parent = _a.parent, props = _a.props, presenceId = _a.presenceId, blockInitialAnimation = _a.blockInitialAnimation, visualState = _a.visualState;\n        if (options === void 0) { options = {}; }\n        var latestValues = visualState.latestValues, renderState = visualState.renderState;\n        /**\n         * The instance of the render-specific node that will be hydrated by the\n         * exposed React ref. So for example, this visual element can host a\n         * HTMLElement, plain object, or Three.js object. The functions provided\n         * in VisualElementConfig allow us to interface with this instance.\n         */\n        var instance;\n        /**\n         * Manages the subscriptions for a visual element's lifecycle, for instance\n         * onRender and onViewportBoxUpdate.\n         */\n        var lifecycles = createLifecycles();\n        /**\n         *\n         */\n        var projection = createProjectionState();\n        /**\n         * A reference to the nearest projecting parent. This is either\n         * undefined if we haven't looked for the nearest projecting parent,\n         * false if there is no parent performing layout projection, or a reference\n         * to the projecting parent.\n         */\n        var projectionParent;\n        /**\n         * This is a reference to the visual state of the \"lead\" visual element.\n         * Usually, this will be this visual element. But if it shares a layoutId\n         * with other visual elements, only one of them will be designated lead by\n         * AnimateSharedLayout. All the other visual elements will take on the visual\n         * appearance of the lead while they crossfade to it.\n         */\n        var leadProjection = projection;\n        var leadLatestValues = latestValues;\n        var unsubscribeFromLeadVisualElement;\n        /**\n         * The latest layout measurements and calculated projections. This\n         * is seperate from the target projection data in visualState as\n         * many visual elements might point to the same piece of visualState as\n         * a target, whereas they might each have different layouts and thus\n         * projection calculations needed to project into the same viewport box.\n         */\n        var layoutState = createLayoutState();\n        /**\n         *\n         */\n        var crossfader;\n        /**\n         * Keep track of whether the viewport box has been updated since the\n         * last time the layout projection was re-calculated.\n         */\n        var hasViewportBoxUpdated = false;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        var values = new Map();\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        var valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        var prevMotionValues = {};\n        /**\n         * x/y motion values that track the progress of initiated layout\n         * animations.\n         *\n         * TODO: Target for removal\n         */\n        var projectionTargetProgress;\n        /**\n         * When values are removed from all animation props we need to search\n         * for a fallback value to animate to. These values are tracked in baseTarget.\n         */\n        var baseTarget = __assign({}, latestValues);\n        // Internal methods ========================\n        /**\n         * On mount, this will be hydrated with a callback to disconnect\n         * this visual element from its parent on unmount.\n         */\n        var removeFromVariantTree;\n        /**\n         *\n         */\n        function render() {\n            if (!instance)\n                return;\n            if (element.isProjectionReady()) {\n                /**\n                 * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n                 * This is the final box that we will then project into by calculating a transform delta and\n                 * applying it to the corrected box.\n                 */\n                applyBoxTransforms(leadProjection.targetFinal, leadProjection.target, leadLatestValues);\n                /**\n                 * Update the delta between the corrected box and the final target box, after\n                 * user-set transforms are applied to it. This will be used by the renderer to\n                 * create a transform style that will reproject the element from its actual layout\n                 * into the desired bounding box.\n                 */\n                updateBoxDelta(layoutState.deltaFinal, layoutState.layoutCorrected, leadProjection.targetFinal, latestValues);\n            }\n            triggerBuild();\n            renderInstance(instance, renderState);\n        }\n        function triggerBuild() {\n            var valuesToRender = latestValues;\n            if (crossfader && crossfader.isActive()) {\n                var crossfadedValues = crossfader.getCrossfadeState(element);\n                if (crossfadedValues)\n                    valuesToRender = crossfadedValues;\n            }\n            build(element, renderState, valuesToRender, leadProjection, layoutState, options, props);\n        }\n        function update() {\n            lifecycles.notifyUpdate(latestValues);\n        }\n        function updateLayoutProjection() {\n            if (!element.isProjectionReady())\n                return;\n            var delta = layoutState.delta, treeScale = layoutState.treeScale;\n            var prevTreeScaleX = treeScale.x;\n            var prevTreeScaleY = treeScale.y;\n            var prevDeltaTransform = layoutState.deltaTransform;\n            updateLayoutDeltas(layoutState, leadProjection, element.path, latestValues);\n            hasViewportBoxUpdated &&\n                element.notifyViewportBoxUpdate(leadProjection.target, delta);\n            hasViewportBoxUpdated = false;\n            var deltaTransform = buildLayoutProjectionTransform(delta, treeScale);\n            if (deltaTransform !== prevDeltaTransform ||\n                // Also compare calculated treeScale, for values that rely on this only for scale correction\n                prevTreeScaleX !== treeScale.x ||\n                prevTreeScaleY !== treeScale.y) {\n                element.scheduleRender();\n            }\n            layoutState.deltaTransform = deltaTransform;\n        }\n        function updateTreeLayoutProjection() {\n            element.layoutTree.forEach(fireUpdateLayoutProjection);\n        }\n        /**\n         *\n         */\n        function bindToMotionValue(key, value) {\n            var removeOnChange = value.onChange(function (latestValue) {\n                latestValues[key] = latestValue;\n                props.onUpdate && sync.update(update, false, true);\n            });\n            var removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n            valueSubscriptions.set(key, function () {\n                removeOnChange();\n                removeOnRenderRequest();\n            });\n        }\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        var initialMotionValues = scrapeMotionValuesFromProps(props);\n        for (var key in initialMotionValues) {\n            var value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        var isControllingVariants = checkIfControllingVariants(props);\n        var isVariantNode = checkIfVariantNode(props);\n        var element = __assign(__assign({ treeType: treeType, \n            /**\n             * This is a mirror of the internal instance prop, which keeps\n             * VisualElement type-compatible with React's RefObject.\n             */\n            current: null, \n            /**\n             * The depth of this visual element within the visual element tree.\n             */\n            depth: parent ? parent.depth + 1 : 0, parent: parent, children: new Set(), \n            /**\n             * An ancestor path back to the root visual element. This is used\n             * by layout projection to quickly recurse back up the tree.\n             */\n            path: parent ? __spreadArray(__spreadArray([], __read(parent.path)), [parent]) : [], layoutTree: parent ? parent.layoutTree : new FlatTree(), \n            /**\n             *\n             */\n            presenceId: presenceId,\n            projection: projection, \n            /**\n             * If this component is part of the variant tree, it should track\n             * any children that are also part of the tree. This is essentially\n             * a shadow tree to simplify logic around how to stagger over children.\n             */\n            variantChildren: isVariantNode ? new Set() : undefined, \n            /**\n             * Whether this instance is visible. This can be changed imperatively\n             * by AnimateSharedLayout, is analogous to CSS's visibility in that\n             * hidden elements should take up layout, and needs enacting by the configured\n             * render function.\n             */\n            isVisible: undefined, \n            /**\n             * Normally, if a component is controlled by a parent's variants, it can\n             * rely on that ancestor to trigger animations further down the tree.\n             * However, if a component is created after its parent is mounted, the parent\n             * won't trigger that mount animation so the child needs to.\n             *\n             * TODO: This might be better replaced with a method isParentMounted\n             */\n            manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()), \n            /**\n             * This can be set by AnimatePresence to force components that mount\n             * at the same time as it to mount as if they have initial={false} set.\n             */\n            blockInitialAnimation: blockInitialAnimation, \n            /**\n             * Determine whether this component has mounted yet. This is mostly used\n             * by variant children to determine whether they need to trigger their\n             * own animations on mount.\n             */\n            isMounted: function () { return Boolean(instance); }, mount: function (newInstance) {\n                instance = element.current = newInstance;\n                element.pointTo(element);\n                if (isVariantNode && parent && !isControllingVariants) {\n                    removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n                }\n                parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n            },\n            /**\n             *\n             */\n            unmount: function () {\n                cancelSync.update(update);\n                cancelSync.render(render);\n                cancelSync.preRender(element.updateLayoutProjection);\n                valueSubscriptions.forEach(function (remove) { return remove(); });\n                element.stopLayoutAnimation();\n                element.layoutTree.remove(element);\n                removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n                parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n                unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n                lifecycles.clearAllListeners();\n            },\n            /**\n             * Add a child visual element to our set of children.\n             */\n            addVariantChild: function (child) {\n                var _a;\n                var closestVariantNode = element.getClosestVariantNode();\n                if (closestVariantNode) {\n                    (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n                    return function () { return closestVariantNode.variantChildren.delete(child); };\n                }\n            },\n            sortNodePosition: function (other) {\n                /**\n                 * If these nodes aren't even of the same type we can't compare their depth.\n                 */\n                if (!sortNodePosition || treeType !== other.treeType)\n                    return 0;\n                return sortNodePosition(element.getInstance(), other.getInstance());\n            }, \n            /**\n             * Returns the closest variant node in the tree starting from\n             * this visual element.\n             */\n            getClosestVariantNode: function () {\n                return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();\n            }, \n            /**\n             * A method that schedules an update to layout projections throughout\n             * the tree. We inherit from the parent so there's only ever one\n             * job scheduled on the next frame - that of the root visual element.\n             */\n            scheduleUpdateLayoutProjection: parent\n                ? parent.scheduleUpdateLayoutProjection\n                : function () {\n                    return sync.preRender(element.updateTreeLayoutProjection, false, true);\n                }, \n            /**\n             * Expose the latest layoutId prop.\n             */\n            getLayoutId: function () { return props.layoutId; }, \n            /**\n             * Returns the current instance.\n             */\n            getInstance: function () { return instance; }, \n            /**\n             * Get/set the latest static values.\n             */\n            getStaticValue: function (key) { return latestValues[key]; }, setStaticValue: function (key, value) { return (latestValues[key] = value); }, \n            /**\n             * Returns the latest motion value state. Currently only used to take\n             * a snapshot of the visual element - perhaps this can return the whole\n             * visual state\n             */\n            getLatestValues: function () { return latestValues; }, \n            /**\n             * Set the visiblity of the visual element. If it's changed, schedule\n             * a render to reflect these changes.\n             */\n            setVisibility: function (visibility) {\n                if (element.isVisible === visibility)\n                    return;\n                element.isVisible = visibility;\n                element.scheduleRender();\n            },\n            /**\n             * Make a target animatable by Popmotion. For instance, if we're\n             * trying to animate width from 100px to 100vw we need to measure 100vw\n             * in pixels to determine what we really need to animate to. This is also\n             * pluggable to support Framer's custom value types like Color,\n             * and CSS variables.\n             */\n            makeTargetAnimatable: function (target, canMutate) {\n                if (canMutate === void 0) { canMutate = true; }\n                return makeTargetAnimatable(element, target, props, canMutate);\n            },\n            // Motion values ========================\n            /**\n             * Add a motion value and bind it to this visual element.\n             */\n            addValue: function (key, value) {\n                // Remove existing value if it exists\n                if (element.hasValue(key))\n                    element.removeValue(key);\n                values.set(key, value);\n                latestValues[key] = value.get();\n                bindToMotionValue(key, value);\n            },\n            /**\n             * Remove a motion value and unbind any active subscriptions.\n             */\n            removeValue: function (key) {\n                var _a;\n                values.delete(key);\n                (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n                valueSubscriptions.delete(key);\n                delete latestValues[key];\n                removeValueFromRenderState(key, renderState);\n            }, \n            /**\n             * Check whether we have a motion value for this key\n             */\n            hasValue: function (key) { return values.has(key); }, \n            /**\n             * Get a motion value for this key. If called with a default\n             * value, we'll create one if none exists.\n             */\n            getValue: function (key, defaultValue) {\n                var value = values.get(key);\n                if (value === undefined && defaultValue !== undefined) {\n                    value = motionValue(defaultValue);\n                    element.addValue(key, value);\n                }\n                return value;\n            }, \n            /**\n             * Iterate over our motion values.\n             */\n            forEachValue: function (callback) { return values.forEach(callback); }, \n            /**\n             * If we're trying to animate to a previously unencountered value,\n             * we need to check for it in our state and as a last resort read it\n             * directly from the instance (which might have performance implications).\n             */\n            readValue: function (key) { var _a; return (_a = latestValues[key]) !== null && _a !== void 0 ? _a : readValueFromInstance(instance, key, options); }, \n            /**\n             * Set the base target to later animate back to. This is currently\n             * only hydrated on creation and when we first read a value.\n             */\n            setBaseTarget: function (key, value) {\n                baseTarget[key] = value;\n            },\n            /**\n             * Find the base target for a value thats been removed from all animation\n             * props.\n             */\n            getBaseTarget: function (key) {\n                if (getBaseTarget) {\n                    var target = getBaseTarget(props, key);\n                    if (target !== undefined && !isMotionValue(target))\n                        return target;\n                }\n                return baseTarget[key];\n            } }, lifecycles), { \n            /**\n             * Build the renderer state based on the latest visual state.\n             */\n            build: function () {\n                triggerBuild();\n                return renderState;\n            },\n            /**\n             * Schedule a render on the next animation frame.\n             */\n            scheduleRender: function () {\n                sync.render(render, false, true);\n            }, \n            /**\n             * Synchronously fire render. It's prefered that we batch renders but\n             * in many circumstances, like layout measurement, we need to run this\n             * synchronously. However in those instances other measures should be taken\n             * to batch reads/writes.\n             */\n            syncRender: render, \n            /**\n             * Update the provided props. Ensure any newly-added motion values are\n             * added to our map, old ones removed, and listeners updated.\n             */\n            setProps: function (newProps) {\n                props = newProps;\n                lifecycles.updatePropListeners(newProps);\n                prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n            }, getProps: function () { return props; }, \n            // Variants ==============================\n            /**\n             * Returns the variant definition with a given name.\n             */\n            getVariant: function (name) { var _a; return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name]; }, \n            /**\n             * Returns the defined default transition on this component.\n             */\n            getDefaultTransition: function () { return props.transition; }, \n            /**\n             * Used by child variant nodes to get the closest ancestor variant props.\n             */\n            getVariantContext: function (startAtParent) {\n                if (startAtParent === void 0) { startAtParent = false; }\n                if (startAtParent)\n                    return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n                if (!isControllingVariants) {\n                    var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n                    if (props.initial !== undefined) {\n                        context_1.initial = props.initial;\n                    }\n                    return context_1;\n                }\n                var context = {};\n                for (var i = 0; i < numVariantProps; i++) {\n                    var name_1 = variantProps[i];\n                    var prop = props[name_1];\n                    if (isVariantLabel(prop) || prop === false) {\n                        context[name_1] = prop;\n                    }\n                }\n                return context;\n            },\n            // Layout projection ==============================\n            /**\n             * Enable layout projection for this visual element. Won't actually\n             * occur until we also have hydrated layout measurements.\n             */\n            enableLayoutProjection: function () {\n                projection.isEnabled = true;\n                element.layoutTree.add(element);\n            },\n            /**\n             * Lock the projection target, for instance when dragging, so\n             * nothing else can try and animate it.\n             */\n            lockProjectionTarget: function () {\n                projection.isTargetLocked = true;\n            },\n            unlockProjectionTarget: function () {\n                element.stopLayoutAnimation();\n                projection.isTargetLocked = false;\n            }, getLayoutState: function () { return layoutState; }, setCrossfader: function (newCrossfader) {\n                crossfader = newCrossfader;\n            }, isProjectionReady: function () {\n                return projection.isEnabled &&\n                    projection.isHydrated &&\n                    layoutState.isHydrated;\n            }, \n            /**\n             * Start a layout animation on a given axis.\n             */\n            startLayoutAnimation: function (axis, transition, isRelative) {\n                if (isRelative === void 0) { isRelative = false; }\n                var progress = element.getProjectionAnimationProgress()[axis];\n                var _a = isRelative\n                    ? projection.relativeTarget[axis]\n                    : projection.target[axis], min = _a.min, max = _a.max;\n                var length = max - min;\n                progress.clearListeners();\n                progress.set(min);\n                progress.set(min); // Set twice to hard-reset velocity\n                progress.onChange(function (v) {\n                    element.setProjectionTargetAxis(axis, v, v + length, isRelative);\n                });\n                return element.animateMotionValue(axis, progress, 0, transition);\n            },\n            /**\n             * Stop layout animations.\n             */\n            stopLayoutAnimation: function () {\n                eachAxis(function (axis) {\n                    return element.getProjectionAnimationProgress()[axis].stop();\n                });\n            },\n            /**\n             * Measure the current viewport box with or without transforms.\n             * Only measures axis-aligned boxes, rotate and skew must be manually\n             * removed with a re-render to work.\n             */\n            measureViewportBox: function (withTransform) {\n                if (withTransform === void 0) { withTransform = true; }\n                var viewportBox = measureViewportBox(instance, options);\n                if (!withTransform)\n                    removeBoxTransforms(viewportBox, latestValues);\n                return viewportBox;\n            },\n            /**\n             * Get the motion values tracking the layout animations on each\n             * axis. Lazy init if not already created.\n             */\n            getProjectionAnimationProgress: function () {\n                projectionTargetProgress || (projectionTargetProgress = {\n                    x: motionValue(0),\n                    y: motionValue(0),\n                });\n                return projectionTargetProgress;\n            },\n            /**\n             * Update the projection of a single axis. Schedule an update to\n             * the tree layout projection.\n             */\n            setProjectionTargetAxis: function (axis, min, max, isRelative) {\n                if (isRelative === void 0) { isRelative = false; }\n                var target;\n                if (isRelative) {\n                    if (!projection.relativeTarget) {\n                        projection.relativeTarget = axisBox();\n                    }\n                    target = projection.relativeTarget[axis];\n                }\n                else {\n                    projection.relativeTarget = undefined;\n                    target = projection.target[axis];\n                }\n                projection.isHydrated = true;\n                target.min = min;\n                target.max = max;\n                // Flag that we want to fire the onViewportBoxUpdate event handler\n                hasViewportBoxUpdated = true;\n                lifecycles.notifySetAxisTarget();\n            },\n            /**\n             * Rebase the projection target on top of the provided viewport box\n             * or the measured layout. This ensures that non-animating elements\n             * don't fall out of sync differences in measurements vs projections\n             * after a page scroll or other relayout.\n             */\n            rebaseProjectionTarget: function (force, box) {\n                if (box === void 0) { box = layoutState.layout; }\n                var _a = element.getProjectionAnimationProgress(), x = _a.x, y = _a.y;\n                var shouldRebase = !projection.relativeTarget &&\n                    !projection.isTargetLocked &&\n                    !x.isAnimating() &&\n                    !y.isAnimating();\n                if (force || shouldRebase) {\n                    eachAxis(function (axis) {\n                        var _a = box[axis], min = _a.min, max = _a.max;\n                        element.setProjectionTargetAxis(axis, min, max);\n                    });\n                }\n            },\n            /**\n             * Notify the visual element that its layout is up-to-date.\n             * Currently Animate.tsx uses this to check whether a layout animation\n             * needs to be performed.\n             */\n            notifyLayoutReady: function (config) {\n                setCurrentViewportBox(element);\n                element.notifyLayoutUpdate(layoutState.layout, element.prevViewportBox || layoutState.layout, config);\n            }, \n            /**\n             * Temporarily reset the transform of the instance.\n             */\n            resetTransform: function () { return resetTransform(element, instance, props); }, restoreTransform: function () { return restoreTransform(instance, renderState); }, updateLayoutProjection: updateLayoutProjection,\n            updateTreeLayoutProjection: function () {\n                element.layoutTree.forEach(fireResolveRelativeTargetBox);\n                /**\n                 * Schedule the projection updates at the end of the current preRender\n                 * step. This will ensure that all layout trees will first resolve\n                 * relative projection boxes into viewport boxes, and *then*\n                 * update projections.\n                 */\n                sync.preRender(updateTreeLayoutProjection, false, true);\n                // sync.postRender(() => element.scheduleUpdateLayoutProjection())\n            },\n            getProjectionParent: function () {\n                if (projectionParent === undefined) {\n                    var foundParent = false;\n                    // Search backwards through the tree path\n                    for (var i = element.path.length - 1; i >= 0; i--) {\n                        var ancestor = element.path[i];\n                        if (ancestor.projection.isEnabled) {\n                            foundParent = ancestor;\n                            break;\n                        }\n                    }\n                    projectionParent = foundParent;\n                }\n                return projectionParent;\n            },\n            resolveRelativeTargetBox: function () {\n                var relativeParent = element.getProjectionParent();\n                if (!projection.relativeTarget || !relativeParent)\n                    return;\n                calcRelativeBox(projection, relativeParent.projection);\n                if (isDraggable(relativeParent)) {\n                    var target = projection.target;\n                    applyBoxTransforms(target, target, relativeParent.getLatestValues());\n                }\n            },\n            shouldResetTransform: function () {\n                return Boolean(props._layoutResetTransform);\n            },\n            /**\n             *\n             */\n            pointTo: function (newLead) {\n                leadProjection = newLead.projection;\n                leadLatestValues = newLead.getLatestValues();\n                /**\n                 * Subscribe to lead component's layout animations\n                 */\n                unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n                unsubscribeFromLeadVisualElement = pipe(newLead.onSetAxisTarget(element.scheduleUpdateLayoutProjection), newLead.onLayoutAnimationComplete(function () {\n                    var _a;\n                    if (element.isPresent) {\n                        element.presence = Presence.Present;\n                    }\n                    else {\n                        (_a = element.layoutSafeToRemove) === null || _a === void 0 ? void 0 : _a.call(element);\n                    }\n                }));\n            }, \n            // TODO: Clean this up\n            isPresent: true, presence: Presence.Entering });\n        return element;\n    };\n};\nfunction fireResolveRelativeTargetBox(child) {\n    child.resolveRelativeTargetBox();\n}\nfunction fireUpdateLayoutProjection(child) {\n    child.updateLayoutProjection();\n}\nvar variantProps = __spreadArray([\"initial\"], __read(variantPriorityOrder));\nvar numVariantProps = variantProps.length;\n\nexport { visualElement };\n","import { motionValue } from '../../value/index.js';\nimport { isMotionValue } from '../../value/utils/is-motion-value.js';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    var _a;\n    for (var key in next) {\n        var nextValue = next[key];\n        var prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping to a new motion value, create a new motion value\n             * from that\n             */\n            element.addValue(key, motionValue(nextValue));\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                var existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            }\n            else {\n                element.addValue(key, motionValue((_a = element.getStaticValue(key)) !== null && _a !== void 0 ? _a : nextValue));\n            }\n        }\n    }\n    // Handle removed values\n    for (var key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","import { calcRelativeOffset } from '../../../motion/features/layout/utils.js';\nimport { eachAxis } from '../../../utils/each-axis.js';\n\nfunction setCurrentViewportBox(visualElement) {\n    var projectionParent = visualElement.getProjectionParent();\n    if (!projectionParent) {\n        visualElement.rebaseProjectionTarget();\n        return;\n    }\n    var relativeOffset = calcRelativeOffset(projectionParent.getLayoutState().layout, visualElement.getLayoutState().layout);\n    eachAxis(function (axis) {\n        visualElement.setProjectionTargetAxis(axis, relativeOffset[axis].min, relativeOffset[axis].max, true);\n    });\n}\n\nexport { setCurrentViewportBox };\n","import { __assign, __read } from 'tslib';\nimport { number, px } from 'style-value-types';\nimport { isKeyframesTarget } from '../../../animation/utils/is-keyframes-target.js';\nimport { invariant } from 'hey-listen';\nimport { transformProps } from '../../html/utils/transform.js';\nimport { findDimensionValueType } from '../value-types/dimensions.js';\n\nvar positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n]);\nvar isPositionalKey = function (key) { return positionalKeys.has(key); };\nvar hasPositionalKey = function (target) {\n    return Object.keys(target).some(isPositionalKey);\n};\nvar setAndResetVelocity = function (value, to) {\n    // Looks odd but setting it twice doesn't render, it'll just\n    // set both prev and current to the latest value\n    value.set(to, false);\n    value.set(to);\n};\nvar isNumOrPxType = function (v) {\n    return v === number || v === px;\n};\nvar BoundingBoxDimension;\n(function (BoundingBoxDimension) {\n    BoundingBoxDimension[\"width\"] = \"width\";\n    BoundingBoxDimension[\"height\"] = \"height\";\n    BoundingBoxDimension[\"left\"] = \"left\";\n    BoundingBoxDimension[\"right\"] = \"right\";\n    BoundingBoxDimension[\"top\"] = \"top\";\n    BoundingBoxDimension[\"bottom\"] = \"bottom\";\n})(BoundingBoxDimension || (BoundingBoxDimension = {}));\nvar getPosFromMatrix = function (matrix, pos) {\n    return parseFloat(matrix.split(\", \")[pos]);\n};\nvar getTranslateFromMatrix = function (pos2, pos3) { return function (_bbox, _a) {\n    var transform = _a.transform;\n    if (transform === \"none\" || !transform)\n        return 0;\n    var matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        var matrix = transform.match(/^matrix\\((.+)\\)$/);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n}; };\nvar transformKeys = new Set([\"x\", \"y\", \"z\"]);\nvar nonTranslationalTransformKeys = transformProps.filter(function (key) { return !transformKeys.has(key); });\nfunction removeNonTranslationalTransform(visualElement) {\n    var removedTransforms = [];\n    nonTranslationalTransformKeys.forEach(function (key) {\n        var value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length)\n        visualElement.syncRender();\n    return removedTransforms;\n}\nvar positionalValues = {\n    // Dimensions\n    width: function (_a) {\n        var x = _a.x;\n        return x.max - x.min;\n    },\n    height: function (_a) {\n        var y = _a.y;\n        return y.max - y.min;\n    },\n    top: function (_bbox, _a) {\n        var top = _a.top;\n        return parseFloat(top);\n    },\n    left: function (_bbox, _a) {\n        var left = _a.left;\n        return parseFloat(left);\n    },\n    bottom: function (_a, _b) {\n        var y = _a.y;\n        var top = _b.top;\n        return parseFloat(top) + (y.max - y.min);\n    },\n    right: function (_a, _b) {\n        var x = _a.x;\n        var left = _b.left;\n        return parseFloat(left) + (x.max - x.min);\n    },\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\nvar convertChangedValueTypes = function (target, visualElement, changedKeys) {\n    var originBbox = visualElement.measureViewportBox();\n    var element = visualElement.getInstance();\n    var elementComputedStyle = getComputedStyle(element);\n    var display = elementComputedStyle.display, top = elementComputedStyle.top, left = elementComputedStyle.left, bottom = elementComputedStyle.bottom, right = elementComputedStyle.right, transform = elementComputedStyle.transform;\n    var originComputedStyle = { top: top, left: left, bottom: bottom, right: right, transform: transform };\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.syncRender();\n    var targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach(function (key) {\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        var value = visualElement.getValue(key);\n        setAndResetVelocity(value, positionalValues[key](originBbox, originComputedStyle));\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nvar checkAndConvertChangedValueTypes = function (visualElement, target, origin, transitionEnd) {\n    if (origin === void 0) { origin = {}; }\n    if (transitionEnd === void 0) { transitionEnd = {}; }\n    target = __assign({}, target);\n    transitionEnd = __assign({}, transitionEnd);\n    var targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    var removedTransformValues = [];\n    var hasAttemptedToRemoveTransformValues = false;\n    var changedValueTypeKeys = [];\n    targetPositionalKeys.forEach(function (key) {\n        var value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key))\n            return;\n        var from = origin[key];\n        var to = target[key];\n        var fromType = findDimensionValueType(from);\n        var toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if (isKeyframesTarget(to)) {\n            var numKeyframes = to.length;\n            for (var i = to[0] === null ? 1 : 0; i < numKeyframes; i++) {\n                if (!toType) {\n                    toType = findDimensionValueType(to[i]);\n                    invariant(toType === fromType ||\n                        (isNumOrPxType(fromType) && isNumOrPxType(toType)), \"Keyframes must be of the same dimension as the current value\");\n                }\n                else {\n                    invariant(findDimensionValueType(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        }\n        else {\n            toType = findDimensionValueType(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                var current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                }\n                else if (Array.isArray(to) && toType === px) {\n                    target[key] = to.map(parseFloat);\n                }\n            }\n            else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) &&\n                (toType === null || toType === void 0 ? void 0 : toType.transform) &&\n                (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                }\n                else {\n                    target[key] = fromType.transform(to);\n                }\n            }\n            else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues = removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] =\n                    transitionEnd[key] !== undefined\n                        ? transitionEnd[key]\n                        : target[key];\n                setAndResetVelocity(value, to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        var convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(function (_a) {\n                var _b = __read(_a, 2), key = _b[0], value = _b[1];\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.syncRender();\n        return { target: convertedTarget, transitionEnd: transitionEnd };\n    }\n    else {\n        return { target: target, transitionEnd: transitionEnd };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */\nfunction unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target)\n        ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd)\n        : { target: target, transitionEnd: transitionEnd };\n}\n\nexport { BoundingBoxDimension, unitConversion };\n","import { resolveCSSVariables } from './css-variables-conversion.js';\nimport { unitConversion } from './unit-conversion.js';\n\n/**\n * Parse a DOM variant to make it animatable. This involves resolving CSS variables\n * and ensuring animations like \"20%\" => \"calc(50vw)\" are performed in pixels.\n */\nvar parseDomVariant = function (visualElement, target, origin, transitionEnd) {\n    var resolved = resolveCSSVariables(visualElement, target, transitionEnd);\n    target = resolved.target;\n    transitionEnd = resolved.transitionEnd;\n    return unitConversion(visualElement, target, origin, transitionEnd);\n};\n\nexport { parseDomVariant };\n","import { __rest, __assign } from 'tslib';\nimport { visualElement } from '../index.js';\nimport { getOrigin, checkTargetForNewValues } from '../utils/setters.js';\nimport { getBoundingBox } from '../dom/projection/measure.js';\nimport { buildHTMLStyles } from './utils/build-styles.js';\nimport { isCSSVariable } from '../dom/utils/is-css-variable.js';\nimport { parseDomVariant } from '../dom/utils/parse-dom-variant.js';\nimport { isTransformProp } from './utils/transform.js';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.js';\nimport { renderHTML } from './utils/render.js';\nimport { getDefaultValueType } from '../dom/value-types/defaults.js';\nimport { buildLayoutProjectionTransformOrigin, buildLayoutProjectionTransform } from './utils/build-projection-transform.js';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nvar htmlConfig = {\n    treeType: \"dom\",\n    readValueFromInstance: function (domElement, key) {\n        if (isTransformProp(key)) {\n            var defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            var computedStyle = getComputedStyle(domElement);\n            return ((isCSSVariable(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0);\n        }\n    },\n    sortNodePosition: function (a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    },\n    getBaseTarget: function (props, key) {\n        var _a;\n        return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\n    },\n    measureViewportBox: function (element, _a) {\n        var transformPagePoint = _a.transformPagePoint;\n        return getBoundingBox(element, transformPagePoint);\n    },\n    /**\n     * Reset the transform on the current Element. This is called as part\n     * of a batched process across the entire layout tree. To remove this write\n     * cycle it'd be interesting to see if it's possible to \"undo\" all the current\n     * layout transforms up the tree in the same way this.getBoundingBoxWithoutTransforms\n     * works\n     */\n    resetTransform: function (element, domElement, props) {\n        var transformTemplate = props.transformTemplate;\n        domElement.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        // Ensure that whatever happens next, we restore our transform on the next frame\n        element.scheduleRender();\n    },\n    restoreTransform: function (instance, mutableState) {\n        instance.style.transform = mutableState.style.transform;\n    },\n    removeValueFromRenderState: function (key, _a) {\n        var vars = _a.vars, style = _a.style;\n        delete vars[key];\n        delete style[key];\n    },\n    /**\n     * Ensure that HTML and Framer-specific value types like `px`->`%` and `Color`\n     * can be animated by Motion.\n     */\n    makeTargetAnimatable: function (element, _a, _b, isMounted) {\n        var transformValues = _b.transformValues;\n        if (isMounted === void 0) { isMounted = true; }\n        var transition = _a.transition, transitionEnd = _a.transitionEnd, target = __rest(_a, [\"transition\", \"transitionEnd\"]);\n        var origin = getOrigin(target, transition || {}, element);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(element, target, origin);\n            var parsed = parseDomVariant(element, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return __assign({ transition: transition,\n            transitionEnd: transitionEnd }, target);\n    },\n    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n    build: function (element, renderState, latestValues, projection, layoutState, options, props) {\n        if (element.isVisible !== undefined) {\n            renderState.style.visibility = element.isVisible\n                ? \"visible\"\n                : \"hidden\";\n        }\n        var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;\n        buildHTMLStyles(renderState, latestValues, projection, layoutState, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : undefined, isProjectionTranform\n            ? buildLayoutProjectionTransformOrigin\n            : undefined);\n    },\n    render: renderHTML,\n};\nvar htmlVisualElement = visualElement(htmlConfig);\n\nexport { getComputedStyle, htmlConfig, htmlVisualElement };\n","import { __assign } from 'tslib';\nimport { visualElement } from '../index.js';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.js';\nimport { htmlConfig } from '../html/visual-element.js';\nimport { buildSVGAttrs } from './utils/build-attrs.js';\nimport { camelToDash } from '../dom/utils/camel-to-dash.js';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.js';\nimport { isTransformProp } from '../html/utils/transform.js';\nimport { renderSVG } from './utils/render.js';\nimport { getDefaultValueType } from '../dom/value-types/defaults.js';\nimport { buildLayoutProjectionTransformOrigin, buildLayoutProjectionTransform } from '../html/utils/build-projection-transform.js';\n\nvar svgVisualElement = visualElement(__assign(__assign({}, htmlConfig), { getBaseTarget: function (props, key) {\n        return props[key];\n    },\n    readValueFromInstance: function (domElement, key) {\n        var _a;\n        if (isTransformProp(key)) {\n            return ((_a = getDefaultValueType(key)) === null || _a === void 0 ? void 0 : _a.default) || 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return domElement.getAttribute(key);\n    },\n    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n    build: function (_element, renderState, latestValues, projection, layoutState, options, props) {\n        var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;\n        buildSVGAttrs(renderState, latestValues, projection, layoutState, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : undefined, isProjectionTranform\n            ? buildLayoutProjectionTransformOrigin\n            : undefined);\n    }, render: renderSVG }));\n\nexport { svgVisualElement };\n","import { __assign } from 'tslib';\nimport { animations } from '../../motion/features/animations.js';\nimport { gestureAnimations } from '../../motion/features/gestures.js';\nimport { createDomVisualElement } from './create-visual-element.js';\n\n/**\n * @public\n */\nvar domAnimation = __assign(__assign({ renderer: createDomVisualElement }, animations), gestureAnimations);\n\nexport { domAnimation };\n","import { htmlVisualElement } from '../html/visual-element.js';\nimport { svgVisualElement } from '../svg/visual-element.js';\nimport { isSVGComponent } from './utils/is-svg-component.js';\n\nvar createDomVisualElement = function (Component, options) {\n    return isSVGComponent(Component)\n        ? svgVisualElement(options, { enableHardwareAcceleration: false })\n        : htmlVisualElement(options, { enableHardwareAcceleration: true });\n};\n\nexport { createDomVisualElement };\n","import { __assign } from 'tslib';\nimport { drag } from '../../motion/features/drag.js';\nimport { layoutAnimations } from '../../motion/features/layout/index.js';\nimport { domAnimation } from './features-animation.js';\n\n/**\n * @public\n */\nvar domMax = __assign(__assign(__assign({}, domAnimation), drag), layoutAnimations);\n\nexport { domMax };\n"],"sourceRoot":""}